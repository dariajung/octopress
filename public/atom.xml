<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yet Another Blog]]></title>
  <link href="http://blog.dariajung.com/atom.xml" rel="self"/>
  <link href="http://blog.dariajung.com/"/>
  <updated>2014-08-29T15:15:46-04:00</updated>
  <id>http://blog.dariajung.com/</id>
  <author>
    <name><![CDATA[Daria Jung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Things Hacker School Taught Me]]></title>
    <link href="http://blog.dariajung.com/blog/2014/08/29/things-hacker-school-taught-me/"/>
    <updated>2014-08-29T14:08:24-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/08/29/things-hacker-school-taught-me</id>
    <content type="html"><![CDATA[<p>Yesterday was my final day of Hacker School as part of the Summer 2014 Batch.</p>

<p>Here are some things being a Hacker Schooler has taught me:</p>

<h4>Getting Past My Fear of Asking Questions</h4>

<hr />

<p>One of my biggest fears has been asking questions to people with more experience and understanding than me, because I had felt that I would be judged for the things I didn&rsquo;t know. I&rsquo;ve had experiences with programmers in the past who have said things such as: &ldquo;You wouldn&rsquo;t have understood [the talk] anyway,&rdquo; to blantant condescension about my lack of knowledge on the subject matters I was asking about. As a result, I had developed an aversion to &ldquo;outing&rdquo; myself as an idiot.</p>

<p>At Hacker School, I found myself asking questions on Zulip, tapping on shoulders, and exposing my ignorance. And pretty much every time, people were happy to share their knowledge with me, saving me hours of frustration that came with trying to figure things out on my own. StackOverflow and Google Fu can only get you so far. I do believe that this wouldn&rsquo;t have been possible without the Hacker School <a href="https://www.hackerschool.com/manual#sub-sec-social-rules" target="_blank">social rules</a>, but my time around other Hacker Schoolers has definitely lessened the general fear of seeking help. A good rule of thumb is that if you can&rsquo;t figure something out on your own in 15 minutes, go look for help and save yourself from yourself. And if someone is rude to you for asking a question, then I&rsquo;m not sure if I would want that person&rsquo;s help &mdash; though it is quite possible they are having an off day.</p>

<h4>Hardware is Not Scary</h4>

<hr />

<p>Before Hacker School, I had probably blinked an LED a few times and made a synthesizer of sorts with an Arduino, but was otherwise hesitant to touch hardware.</p>

<p>This past summer, I got to hack on Arduino, Raspberry Pi, and BeagleBone projects, with lots and lots of help from the lovely <a href="http://wanderinginny.tumblr.com/post/95941886280/on-hardware-hacking-and-new-york">Dana</a>. I made a surveillance camera to spy on my cat and stream it to the web, a light-reactive LED diplay with Adafruit NeoPixels, and helped build <a href="https://www.youtube.com/watch?v=q7g7J3QnvrI">LED-bot</a>.</p>

<p>Just as with software, you end up following tutorials, looking up documentation for pieces (and how to correctly connect them following circuit diagrams), and tinkering. It&rsquo;s just with physical parts! And there&rsquo;s something rather cool about building something tangible.</p>

<p>I ended up doing much more hardware than I had intended, but I am so grateful for the things that I learnt.</p>

<h4>Learning to Tackle Projects (and understanding when to let go)</h4>

<hr />

<p>At Hacker School, I found myself getting curious about Haskell&rsquo;s type inference system, found that the algorithms used theory that I didn&rsquo;t understand, and spent a few weeks going down a type theory rabbit hole, eventually learning the Coq programming language (Coq is a Proof Assistant) through a UPenn grad course called Software Foundations. And I also decided to put my type theory learning on the back burner, so I could focus on exploring other things during my batch.</p>

<p>Anything difficult is going to have many stepping stones, and acknowledging that getting where you want to be might take several tries is totally ok. I am planning on continuing to tackle the type theory stuff in little chunks so that I don&rsquo;t get overwhelmed by all of the information. This meant that I couldn&rsquo;t just start and finish my stint into type theory in a week, but that it will take dedication and commitment that might take a year, or several years.</p>

<p>I think the notorious BitTorrent client project falls into this category. It&rsquo;s quite a difficult project to see through to the very end (many HSers start, and eventually abandon their clients &mdash; myself included), and it was important to understand that many of got to a point where the project wasn&rsquo;t bringing us joy anymore, and that we had grown tired of it (but wanted to finish at some point). Taking a break and putting the project somewhere out of mind for a while helped me feel rejuvenated after weeks spent on the BitTorrent client. I hope to revisit it at some point.</p>

<p>Some HSers even decided to create a <a href="https://twitter.com/hackerschool/status/504759015679590400">BT Support Group</a>.</p>

<hr />

<p>This list is in no way complete. HS has taught me so many things about being a good programmer and a human being that I have trouble articulating at the moment.</p>

<p>Saying good-byes yesterday was overwhelming and there were many emotions; I don&rsquo;t think it will quite sink in that the batch is over until we go back to the real world/school on Tuesday.</p>

<p>Never graduate. :&lsquo;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sipping on Elixir]]></title>
    <link href="http://blog.dariajung.com/blog/2014/08/21/sipping-on-elixir/"/>
    <updated>2014-08-21T00:57:53-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/08/21/sipping-on-elixir</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> __________
</span><span class='line'>&lt; holy cow &gt;
</span><span class='line'> ----------
</span><span class='line'>        \   ^__^
</span><span class='line'>         \  (oo)\_______
</span><span class='line'>            (__)\       )\/\
</span><span class='line'>                ||----w |
</span><span class='line'>                ||     ||</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s almost the end of my batch at Hacker School, but it&rsquo;s okay because I&rsquo;m never [ever] graduating. &#10084;</p>

<hr/>


<p>This past week <a href="https://www.hackerschool.com/residents#Jos%C3%A9-Valim">José Valim</a> has been in residence at Hacker School! José is the creator of the Elixir programming language, which is built on top of the Erlang Virtual Machine. (Joe Armstrong has said that Elixir &ldquo;is good shit.&rdquo; <a href="http://joearms.github.io/2013/05/31/a-week-with-elixir.html">Seriously!</a>). José is also a core contributor to Rails. So. Rad.</p>

<p>On Monday night, José gave us a quick introduction to Elixir and explained that Elixir is a functional, concurrent, but most importantly, a distributed language. He gave us a bit of background on Erlang and its origins as a language used for telecommunication. Erlang provides support for fault tolerent, non-stop, real-time applications. Also, hot swapping is pretty cool (which José did a demo of in Elixir). For these reasons (and many more), Erlang is the language used in messaging systems like Facebook messenger and WhatsApp.</p>

<p>I&rsquo;ve been spending the past few days working through <a href="http://chimera.labs.oreilly.com/books/1234000001642">Etudes for Elixir</a> in order to get a quick introduction to the language, and get myself up and running.</p>

<p>Some quick first impressions/takeaways:</p>

<p>Elixir is compatible with Erlang code, but it has a nice Ruby-like syntax. It&rsquo;s kinda like the love child of Ruby and Erlang.
Elixir has all the goodies like pattern matching, list comprehensions, anonymous functions that I heart from Haskell. There aren&rsquo;t quite type signatures; instead, there are these things called <a href="http://elixir-lang.org/docs/stable/elixir/Kernel.Typespec.html">specs</a>. Specs are mostly used for documenting code, but on some occasion, people use tools like <a href="http://www.erlang.org/doc/man/dialyzer.html">Dialyzer</a> to find type errors (I will probably check this out at some point).</p>

<p>One thing I find super cool about <code>iex</code>, the Elixir repl, is the <code>h</code> command to read documentation.</p>

<p><img src="http://blog.dariajung.com/images/iex.png" alt="" /></p>

<p>Also, Elixir has SUPERB documentation. I&rsquo;ve been very pleased with how well explainations are written out, and that there are examples! Examples!</p>

<p>I&rsquo;m making my way through most of the topics in Elixir&rsquo;s <a href="http://elixir-lang.org/getting_started/1.html">getting started</a> section through études (currently getting acquainted processes), and I&rsquo;m excited to learn about Mix and OTP next. In general, I&rsquo;m excited to get deeper into Elixir since I don&rsquo;t know much about concurrent and distributed programming.</p>

<p>Today, José did a seminar on how Iterators are implemented in Elixir, going over eager map, eager filter, the idea of inlining and so on before introducing us to the idea of lazy map, etc. It was a very informative session and I will write about that more in a different blog post.</p>

<p>And just throwing this out there: HOW COOL IS IT TO BE ABLE TO ASK QUESTIONS IN PERSON TO THE CREATOR OF THE LANGUAGE YOU&rsquo;RE LEARNING? Thanks a ton to Hacker School for this amazing opportunity.</p>

<p>So far, learning Elixir has been quite nice, and the transition from Haskell to Elixir has been pretty smooth.</p>

<p>Looking forward to all of the things I learn before the end of my batch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whiteboarding to Unconfuse Myself]]></title>
    <link href="http://blog.dariajung.com/blog/2014/08/15/whiteboarding/"/>
    <updated>2014-08-15T14:38:04-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/08/15/whiteboarding</id>
    <content type="html"><![CDATA[<p>A few days ago, I stumbled on a <a href="https://github.com/jwiegley/category-theory">repository</a> on GitHub that was exploring category theory through the use of Coq, formalizing Edware Kmett&rsquo;s Hask library. Curious, I wondered what Hask was and read the description: &ldquo;Category theory for Haskell with a lens flavor&rdquo;.</p>

<p>But&hellip; what are lenses?</p>

<p>I remembered that I had bookmarked a <a href="http://blog.jakubarnold.cz/2014/07/14/lens-tutorial-introduction-part-1.html">blog post</a> that Steve Klabnik tweeted a while ago because it was related to Haskell. And now it was relevant to my interests.</p>

<p>Lenses are, at a high level, something like &ldquo;getters&rdquo; and &ldquo;setters&rdquo; that are used in imperative programming languages. It&rsquo;s not uncommon to see something like <code>book.author.name</code>. Lenses provide an abstraction like this for Haskell.</p>

<p>I spent a long time staring at the explanations in this blog post, and after pairing with Alan a bit on a simple Lens implementation, felt blown away by the weirdness and how elegant of an idea this was.</p>

<p>A realization that I had about working with Alan (after ten weeks&hellip;) is that he is the type of person to think things out by writing on a white board. Up until this point, I had never really thought about whiteboarding as a way of getting my thoughts out so that I could actually <em>look</em> at them. And the act of writing type signatures out instead of staring at them on a screen made a lot of difference for me. (I do write on scratch paper, but I generally do so very disorganizedly).</p>

<p>After Thursday demo presentations, I spent about thirty minutes whiteboarding out my thought process for the implementations of <code>over</code> and <code>set</code>:</p>

<p><img src="http://blog.dariajung.com/images/wb2.JPG" alt="whiteboarding 1" /></p>

<p><img src="http://blog.dariajung.com/images/wb1.JPG" alt="whiteboarding 1" /></p>

<p>I guess moral of the story for me is that I should whiteboard more to figure out what I&rsquo;m doing when I&rsquo;m confused before jumping straight to code. A very simple epiphany, but a very helpful one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Cat Cam]]></title>
    <link href="http://blog.dariajung.com/blog/2014/08/12/building-a-cat-cam/"/>
    <updated>2014-08-12T17:09:18-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/08/12/building-a-cat-cam</id>
    <content type="html"><![CDATA[<p>I recently purchased my first Raspberry Pi (the Model B+ whooho!)</p>

<p><img src="http://blog.dariajung.com/images/pi.jpg" alt="&quot;PI&quot;" /></p>

<p>I decided that my first RaspPi project would be to build a Cat Cam to monitor Kitkat while I am away from the apartment. Occasionally he&rsquo;s being doing a few weird things like pooping outside of his litter box while I&rsquo;m not home. Basically, this is me spying on my cat.</p>

<p>After a couple of component orders (PS3Eye webcam, MicroSD card) arrived, I was ready to start setting up my new Pi.</p>

<p>Dana lent me her serial cable so I could access the Pi without an external display. However, this meant that NOOBS wouldn&rsquo;t work (it seems to require an external display), and we had to mount Raspbian Wheezy onto the SD card. There are always bumps along the way to setting up new hardware&hellip; Soon after this though, I was able to SSH into the Pi, which was great!</p>

<p>But more complications followed&hellip; RaspPi is developed in the UK, so the locale was set to en-GB.UTF8. I had some problems figuring out how to get it to be en-US.UTF8 and was going crazy trying to figure it out, because I SWEAR I was selecting install new locales when I tried to generate and update them. (Lol, no I wasn&rsquo;t). Luckily, <a href="https://www.hackerschool.com/residents#Paul-Tagliamonte">Paul</a> was able to help me troubleshoot and not pull my hair out.</p>

<p>Then, I was ready to set up the PS3Eye camera and motion detection snapshots using the motion package and following along with this <a href="http://chris.gg/2012/07/using-a-ps3-eyetoy-with-the-raspberry-pi/">tutorial</a>. The set up with the camera was incredibly straightforward, and things just worked! I was able to view the stream from within the local network of the Pi. But as it turned out, <em>only</em> the local network. When I excitely told Matt to view the stream (after I had pushed a simple Python-Flask app to Heroku), he told me that the stream was empty.</p>

<p>Slightly deflated, I started looking around RaspPi forums and found out that my problem was because the RaspPis, as a default, only allow connections from a local network due to security reasons. Basically all of the suggestions pointed to enabling port forwarding, which seemed like a super insecure move, even for someone who has barely any knowledge of security practices. Basically, I would have to open up the Pi to the outside world so the stream could be viewable on the Internet. This meant that anyone could try to SSH into it; even if it has no sensitive information on it, I still don&rsquo;t want people in my Pi :/.</p>

<p>(I took a break at this point to create a script that emailed my personal email account the IP address of the RaspPi every time it was booted to make it easy to SSH into it. Whoo!)</p>

<p>I wanted to avoid port forwarding if I could. I thought about it a bit, and last night, I remembered the awesome AWESOMENESS that is <a href="https://ngrok.com/">ngrok</a>. Ngrok creates a tunnel between localhost and the Internet. This totally solved my problem! So this morning, I played around with ngrok on the Pi, creating a tunnel that would allow the webcam feed to be viewable from the Internet, and used that in the Flask app feed source. To double check that this worked, I asked Matt to view it from Minnesota (he&rsquo;s on vacay visiting family). AND VICTORY, IT WORKS!</p>

<p>My next steps are to create a start script that runs the motion daemon, and a script to auto start ngrok. I have created a cronjob to delete the contents of a tmp file that takes a picture everytime the webcam detects motion (this can mean A LOT of pictures depending on where it is placed). At midnight every night, the script just deletes the day&rsquo;s worth of pictures, assuming that I will be able to look through them for any suspicious Kitkat behavior before the day is up.</p>

<p>I&rsquo;m really excited to set this up at home and spy on my cat >:D Next, I want to build a toy component so I can play with Kitkat remotely.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Love My Cat, an Anecdote About Depression]]></title>
    <link href="http://blog.dariajung.com/blog/2014/08/11/why-i-love-my-cat/"/>
    <updated>2014-08-11T23:23:01-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/08/11/why-i-love-my-cat</id>
    <content type="html"><![CDATA[<p>Depression is a lying sack of shit asshole.</p>

<hr/>


<br/>


<p>I think most people know that I love my cat, Kitkat, quite a lot. But I don&rsquo;t think most people know <em>why</em>.</p>

<p>I took a break from college last September due to something that was eventually diagnosed as a severe case of Major Depressive Disorder (Single Episode). For some reason, after a perfectly happy summer, I started to experience a deep, unfathomable sadness and sense of self-loathing. I was back on campus for the fall semester of my third year of university, and I couldn&rsquo;t focus. I slept more than I usually did, and I started crying from exhaustion, and sometimes, for no reason. But mostly, it was because of these cyclic thoughts that kept telling me how worthless of a person I was, and seriously, what was the point? Crazy to think about it now but I reacted to this by simply believing that I was feeling burnt out.</p>

<p>I was able to take a year off from school, a leave of absence as they call it. About a month passed with me sleeping in with all the shades drawn. I didn&rsquo;t see light for several days at a time, and had a hard time doing anything without sobbing for hours (literally <em>hours</em>). One time Matt, my boyfriend, found me in the shower fully clothed and I just remember thinking that I had to get clean. Whatever the compulsion, I&rsquo;m still not sure what exactly I was thinking.</p>

<p>Eventually, I realized that I had a problem. I was scaring myself and I was scaring Matt. I started seeing a therapist and was put on a steady dose of anti-depressants. Around this time, I also decided to foster a cat that was about to be euthanized (Animal Care and Control centers in NYC run out of room due to the amount of animals they take in every day, and so they have to euthanize animals to make room for the incoming animals). Kitkat was on the list of cats to be euthanized. Matt and I put in a request to foster a cat, and because I knew black cats had a smaller chance of being saved, I picked Kitkat.</p>

<p>I was still mostly apartment-ridden at this point, and Matt was working during the day, which meant that I had to go to the East Harlem AC&amp;C to pick up Kitkat. It gave me a reason to leave the apartment, when most days I stayed shut in. Kitkat came into my life when I was feeling completely worthless, and the realization that even someone worthless like me could take care of an animal meant that <em>maybe</em> I actually wasn&rsquo;t worthless. Getting food and toys for Kitkat gave me even more reason to leave and re-enter society, at least see sun for 30 minutes a day. Gradually, Kitkat stopped being a shy shelter cat, and has proven himself a funny and cuddly companion. Supporting evidence: his vet said he was &ldquo;funny and charming&rdquo; :). Becoming Kitkat&rsquo;s human has been just as helpful in my convalescence as support from loved ones, yoga, medication, and cognitive therapy.</p>

<p><img src="http://blog.dariajung.com/images/kk.png" alt="&quot;kitkat&quot;" /></p>

<p>This post was prompted by the news of Robin Williams&#8217; suicide. RIP.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gayle Laakman McDowell Talk Recap]]></title>
    <link href="http://blog.dariajung.com/blog/2014/08/01/gayle-laakman-mcdowell-talk-recap/"/>
    <updated>2014-08-01T14:32:53-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/08/01/gayle-laakman-mcdowell-talk-recap</id>
    <content type="html"><![CDATA[<p>On Wednesday evening, a couple of us headed to a talk by Gayle Laakman McDowell, the author of <em>Cracking the Coding Interview</em>.</p>

<p>She gave us some redundant information, but also some great insights that I had never thought about before.</p>

<p>First some things before the ~technical~ aspect of the interivew:</p>

<ul>
<li>Try to keep your resume to one page because most resume readers spend maybe 5 &ndash; 15 seconds looking at it. There are no fast and hard rules for how it should be formatted, but it should be scannable in that amount of time.</li>
<li>Put your outside of school/work projects on your resume! Many candidates don&rsquo;t put their projects on their resume for whatever reason.</li>
<li>Ask your recruiter what to expect from the interview. There is no reason to be afraid to ask about what you might encounter. However, take this with a grain of salt because the recruiter isn&rsquo;t going to be the one interviewing you.</li>
<li>Coming off a bit weird to a recruiter is okay. As long as you aren&rsquo;t being as asshole, don&rsquo;t worry too much.</li>
</ul>


<p>Other pre-interview stuff to know:</p>

<ul>
<li>Struggling during an interview is <em>normal</em>. The whole point is to see how you reason through difficult questions.</li>
<li>How you do is relative to people who are asked the <strong>same</strong> question. (This in particular was something that made so much sense, but was something I had never realized. I always quantified my success by how many questions I got correct.)</li>
<li>Hashtables go a long way.</li>
<li>Know linked lists, arrays, arraylists, binary search trees, merge sort, and quicksort well.</li>
<li>Know Big O like the back of your hand.</li>
<li>Try to recode data structures from scratch.</li>
<li>Write code on paper so you don&rsquo;t freak out when you have to white board and don&rsquo;t have nice things like syntax highlighting.</li>
</ul>


<p>During the interview:</p>

<ul>
<li>LISTEN for the little details. If you&rsquo;re given a list, is it sorted already? Are the elements distinct? Repeat the question back to make sure you understood it.</li>
<li>Work through the question using a <em>good</em> example.</li>
</ul>


<p>But what is a good example? Let&rsquo;s work with this question Gayle gave us:</p>

<blockquote><p>Given two sorted arrays, compute the intersection.</p></blockquote>

<p>What about:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is bad because this is a special case, in several ways. The two arrays are the same length, and the element that appears in both arrays are in the same index. These are also too small.</p>

<p>In general, try to come up with examples that avoid special cases, and are about 50% larger than your initial instinct. So if you think about three element arrays, try working with six element arrays.</p>

<p>Brute force a solution first; you can optimize it later but it&rsquo;s better to have a solution to work with. Walk through the brute force solution using your example. Remember the small details when implementing your algorithm, ie: is the input sorted? is the information cached? etc.</p>

<p>The brute force approach to solving this is go through the elements of the first array, and check all elements of the second array to see if they match. Move onto the next element in the first array and do the same thing. Keep doing this until you&rsquo;ve gone through the entire first array.</p>

<p>After this, try to imagine what the fastest you can imagine an algorithm being for the problem you have been given. She called this the best conceivable runtime. Was your solution O(nlogn)? Can you see it being solved in linear time? Try to get there.</p>

<p>Let&rsquo;s go back to the example question and see how we can optimize it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">34</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will have to go through every element in the first array, but not for the second. Why? Well, we know these arrays are sorted. So if we&rsquo;re looking to see if 1 is in both arrays, we look at 1 in the first, but we hit a 2 in the second. Since these are sorted, anything after 2 is going to be greater than 2. We can stop looking here.</p>

<p>Think about spacetime trade offs. Also always keep in mind hashtables because apparently they can be used to solve a lot of algorithms questions in optimal ways. This particular problem can be solved using a hashtable. I have solved it in Python <a href="https://github.com/dariajung/interview-prep/blob/master/data_structures_algos/arrayintersect.py">here</a>.</p>

<p>Some whiteboarding tips:</p>

<ul>
<li>Code far top left corner.</li>
<li>Write small and straight.</li>
<li><em>If</em> it helps, write pseudocode. But don&rsquo;t write psuedocode that uses syntax that looks too much like a programming language&rsquo;s because it&rsquo;ll just look like shitty code.</li>
</ul>


<p>Code breadth first:</p>

<ul>
<li>Modularize from the very beginning.</li>
<li>Go level by level, top down.</li>
<li>Hit the most interesting thing first, then move down.</li>
<li>You&rsquo;re most likely to screw up on something like shifting bits around, but that isn&rsquo;t very interesting, so just save it for last.
Interviewers will not care if you messed up on something like that if you got the bigger picture correct.</li>
</ul>


<p>If you&rsquo;re ever confused, stop, and recoup. Don&rsquo;t push through when confused. Walk through your example again.</p>

<p>When you&rsquo;re done writing your algorithm, test your code with an example, but NOT the example you used to understand the question. Good examples are long but not necessarily good test cases. Go with something shorter so if you hit a bug, you&rsquo;ll hit the bug faster. Start with small general test cases, then go to special cases.</p>

<p>Look at your code for interesting lines; what lines are most probable for errors?</p>

<p>After this, follow up with your recruiter!</p>

<p>Also, always keep in mind that interviewers are people too, and they all have varying personalities. If one is being really quiet, that doesn&rsquo;t mean you aren&rsquo;t doing well. Sometimes interviewers act harsher if you are doing well! What. They don&rsquo;t think you need their help and they&rsquo;re thinking about ways to push you.</p>

<p>Cool. Once you get an offer, negotiate, because it&rsquo;s a win-win. 30 minutes isn&rsquo;t a lot, but hey, you might get a couple thousand dollars out of it. Counter offer their offer by bumping it up $20k. They&rsquo;ll probably throw you a bone and meet you in the middle.</p>

<p>Obviously Gayle&rsquo;s advice should also be taken with a grain of salt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re-learning Math With Coq]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/31/re-learning-math-with-coq/"/>
    <updated>2014-07-31T10:25:40-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/31/re-learning-math-with-coq</id>
    <content type="html"><![CDATA[<p>The last time I was doing a lot of inductive proofs was during my third year of high school. I did a few in my Discrete Mathematics class, but to be quite honest, I hardly remember anything from that it (I should really revisit the material at some point&hellip;).</p>

<p>Considering that it has been more than four years &mdash;I took a gap year between my second and third year of university, I am now going into third year&mdash; I was a bit unsure of my math chops. But working through <a href="http://www.cis.upenn.edu/~bcpierce/sf/current/index.html">Software Foundations</a> has been an absolute blast. And it&rsquo;s been so cool to see the <a href="http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence">Curry-Howard correspondence</a> in action through writing proofs in Coq.</p>

<p>Rntz gave a great presentation on <a href="https://github.com/rntz/curry-howard-slides/raw/master/pres.pdf">Curry-Howard</a>, presenting formal logic, a lambda-calculus, and then showing the connection between formal logic proofs and typed expressions/programs.</p>

<p>So far, I&rsquo;ve been spending time proving some mathematical axioms such as the additive identity, multiplicative communtativity, right distributive property of multiplication over addition of numbers, and so on.</p>

<p>Coq has various proof tactics, <code>intros</code>, <code>destruct</code>, and <code>induction</code>, to name a few.</p>

<p>To show you the kind of stuff I&rsquo;ve been doing, let&rsquo;s work through an example.</p>

<p>Let&rsquo;s prove that <code>n + 0 = 0</code>.</p>

<p>First we define the theorem (adding a 0 to the right side of a natural number gives us the original natural number):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="kn">Theorem</span> <span class="n">plus_0_r</span> <span class="o">:</span> <span class="k">forall</span> <span class="n">n</span><span class="o">:</span><span class="n">nat</span><span class="o">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">0</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how do we prove this?</p>

<p>Well, first we need to introduce n into the scope of the proof.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="kn">Proof</span><span class="o">.</span>
</span><span class='line'>    <span class="k">intros</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Coq shows us that we can now work with n, and that our subgoal is to prove that n + 0 = n.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="mi">1</span> <span class="n">subgoals</span><span class="o">,</span> <span class="n">subgoal</span> <span class="mi">1</span> <span class="o">(</span><span class="nc">ID</span> <span class="mi">88</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">:</span> <span class="n">nat</span>
</span><span class='line'><span class="o">============================</span>
</span><span class='line'><span class="n">n</span> <span class="o">+</span> <span class="mi">0</span> <span class="o">=</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool. And now we can induct on n. In induction, you must prove the base case of <code>n = 0</code>, and for <code>n = S n'</code>; <code>S n'</code> can be read as the <em>successor</em> of n&#8217;, which is equivalent to n.</p>

<p>So now, we use the <code>induction</code> tactic in Coq:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="kn">Proof</span><span class="o">.</span>
</span><span class='line'>    <span class="k">intros</span><span class="o">.</span> <span class="k">induction</span> <span class="n">n</span> <span class="k">as</span> <span class="o">[|</span> <span class="n">n&#39;</span><span class="o">].</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have two subgoals to prove, the base case and the successor case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="mi">2</span> <span class="n">subgoals</span><span class="o">,</span> <span class="n">subgoal</span> <span class="mi">1</span> <span class="o">(</span><span class="nc">ID</span> <span class="mi">91</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">============================</span>
</span><span class='line'><span class="mi">0</span> <span class="o">+</span> <span class="mi">0</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">subgoal</span> <span class="mi">2</span> <span class="o">(</span><span class="nc">ID</span> <span class="mi">94</span><span class="o">)</span> <span class="k">is</span><span class="o">:</span>
</span><span class='line'><span class="nc">S</span> <span class="n">n&#39;</span> <span class="o">+</span> <span class="mi">0</span> <span class="o">=</span> <span class="nc">S</span> <span class="n">n&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For my own benefit, I like to write out what case I am proving, which in this case is for when <code>n = 0</code>.
As we see, Coq gives us <code>0 + 0 = 0</code>. We can simplify this expression by writing <code>simpl</code>, and Coq will reduce this to <code>0 = 0</code>. And we know <code>0 = 0</code>. It&rsquo;s a fact. We can simply write <code>reflexivity</code> to finish proving this subgoal.</p>

<p>As a sidenote, reflexivity will simplify for you, so it wasn&rsquo;t necessary to do the <code>simpl</code> step. However, I found it helps my thought process to write out all of the steps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="kn">Proof</span><span class="o">.</span>
</span><span class='line'>    <span class="k">intros</span><span class="o">.</span> <span class="k">induction</span> <span class="n">n</span> <span class="k">as</span> <span class="o">[|</span> <span class="n">n&#39;</span><span class="o">].</span>
</span><span class='line'>    <span class="nc">Case</span> <span class="s2">&quot;n = 0&quot;</span><span class="o">.</span> <span class="k">simpl</span><span class="o">.</span> <span class="kp">reflexivity</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Coq now tells us we have one subgoal remaining:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="mi">1</span> <span class="n">subgoals</span><span class="o">,</span> <span class="n">subgoal</span> <span class="mi">1</span> <span class="o">(</span><span class="nc">ID</span> <span class="mi">94</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">n&#39;</span> <span class="o">:</span> <span class="n">nat</span>
</span><span class='line'><span class="nc">IHn&#39;</span> <span class="o">:</span> <span class="n">n&#39;</span> <span class="o">+</span> <span class="mi">0</span> <span class="o">=</span> <span class="n">n&#39;</span>
</span><span class='line'><span class="o">============================</span>
</span><span class='line'><span class="nc">S</span> <span class="n">n&#39;</span> <span class="o">+</span> <span class="mi">0</span> <span class="o">=</span> <span class="nc">S</span> <span class="n">n&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we are given <code>IHn'</code>, an induction hypothesis to work with. So let&rsquo;s prove our second subgoal for case &ldquo;n = S n&#8217;&rdquo;:</p>

<p>We can simplify this down to <code>S (n' + 0) = S n</code> by using the <code>simpl</code> tactic. Adding a 0 to n&#8217;, and then calling a successor on it is no different from adding 0 to the successor of n&#8217;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="mi">1</span> <span class="n">subgoals</span><span class="o">,</span> <span class="n">subgoal</span> <span class="mi">1</span> <span class="o">(</span><span class="nc">ID</span> <span class="mi">101</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Case</span> <span class="o">:=</span> <span class="s2">&quot;n = S n&#39;&quot;</span> <span class="o">:</span> <span class="nn">String</span><span class="p">.</span><span class="n">string</span>
</span><span class='line'><span class="n">n&#39;</span> <span class="o">:</span> <span class="n">nat</span>
</span><span class='line'><span class="nc">IHn&#39;</span> <span class="o">:</span> <span class="n">n&#39;</span> <span class="o">+</span> <span class="mi">0</span> <span class="o">=</span> <span class="n">n&#39;</span>
</span><span class='line'><span class="o">============================</span>
</span><span class='line'><span class="nc">S</span> <span class="o">(</span><span class="n">n&#39;</span> <span class="o">+</span> <span class="mi">0</span><span class="o">)</span> <span class="o">=</span> <span class="nc">S</span> <span class="n">n&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what&rsquo;s this? We have an induction hypothesis that tells us that <code>n' + 0 = n'</code>. Oh, this looks familiar. So let&rsquo;s rewrite <code>S (n' + 0)</code> using our induction hypothesis:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="kn">Proof</span><span class="o">.</span>
</span><span class='line'>    <span class="k">intros</span><span class="o">.</span> <span class="k">induction</span> <span class="n">n</span> <span class="k">as</span> <span class="o">[|</span> <span class="n">n&#39;</span><span class="o">].</span>
</span><span class='line'>    <span class="nc">Case</span> <span class="s2">&quot;n = 0&quot;</span><span class="o">.</span> <span class="k">simpl</span><span class="o">.</span> <span class="kp">reflexivity</span><span class="o">.</span>
</span><span class='line'>    <span class="nc">Case</span> <span class="s2">&quot;n = S n&#39;&quot;</span><span class="o">.</span> <span class="k">simpl</span><span class="o">.</span>  <span class="k">rewrite</span> <span class="o">-&gt;</span> <span class="nn">IHn&#39;</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="mi">1</span> <span class="n">subgoals</span><span class="o">,</span> <span class="n">subgoal</span> <span class="mi">1</span> <span class="o">(</span><span class="nc">ID</span> <span class="mi">102</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Case</span> <span class="o">:=</span> <span class="s2">&quot;n = S n&#39;&quot;</span> <span class="o">:</span> <span class="nn">String</span><span class="p">.</span><span class="n">string</span>
</span><span class='line'><span class="n">n&#39;</span> <span class="o">:</span> <span class="n">nat</span>
</span><span class='line'><span class="nc">IHn&#39;</span> <span class="o">:</span> <span class="n">n&#39;</span> <span class="o">+</span> <span class="mi">0</span> <span class="o">=</span> <span class="n">n&#39;</span>
</span><span class='line'><span class="o">============================</span>
</span><span class='line'><span class="nc">S</span> <span class="n">n&#39;</span> <span class="o">=</span> <span class="nc">S</span> <span class="n">n&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Omg, the left and the right are equivalent. And now we can say, this is true by reflexivity, and end our proof by writing <code>Qed.</code></p>

<p>Our full proof:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="kn">Proof</span><span class="o">.</span>
</span><span class='line'>    <span class="k">intros</span><span class="o">.</span> <span class="k">induction</span> <span class="n">n</span> <span class="k">as</span> <span class="o">[|</span> <span class="n">n&#39;</span><span class="o">].</span>
</span><span class='line'>    <span class="nc">Case</span> <span class="s2">&quot;n = 0&quot;</span><span class="o">.</span> <span class="k">simpl</span><span class="o">.</span> <span class="kp">reflexivity</span><span class="o">.</span>
</span><span class='line'>    <span class="nc">Case</span> <span class="s2">&quot;n = S n&#39;&quot;</span><span class="o">.</span> <span class="k">simpl</span><span class="o">.</span>  <span class="k">rewrite</span> <span class="o">-&gt;</span> <span class="nn">IHn&#39;</span><span class="p">.</span> <span class="n">reflexivity</span><span class="o">.</span>
</span><span class='line'><span class="kn">Qed</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>HOW COOL IS THAT???</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Type Theory]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/28/exploring-type-theory/"/>
    <updated>2014-07-28T22:19:39-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/28/exploring-type-theory</id>
    <content type="html"><![CDATA[<p>I started off today with a specific goal in mind. By the end of the day, I was pretty off my mark.</p>

<p>My original intent was to work through a tutorial, <a href="http://www.grabmueller.de/martin/www/pub/AlgorithmW.pdf">Algorithm W Step by Step</a>, for implementing the classic Algorithm W (proposed by Robin Milner) for type inference in Haskell. I was stoked to finally take a closer look at Hindley-Milner and foolishly thought I would spend a few days on it.</p>

<p>In reality, I had started my descent down the rabbit hole. I found myself reading, and while I felt comfortable with the actual Haskell code itself, the reasons for why the tutorial was implementing things by using sets, or talking about free type variables and type schemes made me feel that yeah, maybe(?) I could infer something from my understanding of Haskell, but I was still lacking appropriate knowledge for this literature.</p>

<p>So, I asked this silly question on Zulip:</p>

<blockquote><p><strong>Stream Subject</strong>: Category Theory/Type Theory/Set Theory</p>

<p><strong>Message</strong>: Hi hi. I&rsquo;m delving into Hindley-Milner for type inference and I&rsquo;m finding lots of terminology that I don&rsquo;t understand. Are there any friendly introductions to all of the theories? AM I WAY IN OVER MY HEAD?</p></blockquote>

<p><a href="http://www.rntz.net/">Rntz</a> pointed me to <a href="http://www.cis.upenn.edu/~bcpierce/tapl/">Types and Programming Languages</a> as a resource and I was intrigued. I started reading it, and of course my attention started to wane because textbooks. After some googling, and remembering back to my first week at Hacker School, I was reminded of a UPenn grad course called <a href="http://www.cis.upenn.edu/~bcpierce/sf/current/index.html">Software Foundations</a>. The course uses TAPL but also utilizes an interactive book of Coq proofs as its main text. Interactive? Sign me up.</p>

<p>Two ways to run Coq are through the CoqIDE or through Proof General Coq mode in Emacs. I found to my chagrin that CoqIDE was ugly and slow and in general, not something that I wanted to use. But that meant that I had to learn&hellip; Emacs. So for about two hours, I went through the Emacs tutorial and fiddled with my .emacs file, thinking about the time I saw Richard Stallman dressed as a saint from the Church of Emacs and resigned myself to learning a new text editor/operating system/whatever (plz don&rsquo;t hurt me, I&rsquo;m new to emacs).</p>

<p>After this, I couldn&rsquo;t figure out how to run Coq through Proof General, and time passed while I grew increasingly frustrated. Then Alan to the rescue! He helped me figure out that emacs wasn&rsquo;t correctly loading my path, and once that was fixed, I was able to write Coq and do cute stuff like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="kn">Proof</span><span class="o">.</span> <span class="kp">reflexivity</span><span class="o">.</span> <span class="kn">Qed</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yay!</p>

<p>Tomorrow I will continue working through Software Foundations. Aki, an alum, has also kindly pointed me to some resources for implementing type inference algorithms which I plan to hit up once I have gotten a feel for the theory behind it. Excited to see where this leads.</p>

<p>Oh, and I remapped <code>Caps Lock</code> from <code>ESC</code> to <code>CTRL</code>. So, uh, yeah.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Working Gunzip and Soldering]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/24/a-working-gunzip-and-soldering/"/>
    <updated>2014-07-24T10:01:32-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/24/a-working-gunzip-and-soldering</id>
    <content type="html"><![CDATA[<p>Yesterday was a super productive day for me. In the morning, I was in the midst of debugging my gunzip implementation in Haskell.
I have a function <code>addItem</code> that adds a node to a HuffmanTree by writing an IORef val because I needed mutability. When I&rsquo;m creating the HuffmanTree, I need to add a whole slew of values (from a code table) into the tree, so I mapped the addItem function over the list of codes, which returned <code>[IO()]</code>. My problem here was that despite having added items to an initial empty tree, I was returning an unaltered tree. I was confused because I was sure I had allowed for mutability! But why?!</p>

<p>Luckily, Alan happened to be running an impromptu session on Monads where he covered the IO Monad, and attending that helped me figure out what my problem was, I think.</p>

<p>I&rsquo;m still not precisely sure if I&rsquo;m understanding correctly but <code>[IO()]</code> is a list of <code>IO()</code>s. And things in the IO monad won&rsquo;t evaluate until run-time. So basically I had a list of thunk-like things that wouldn&rsquo;t write until evaluated.</p>

<p>This does not work</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">added</span> <span class="ow">=</span>  <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">codes</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">addItem</span> <span class="n">root</span> <span class="n">label</span> <span class="n">codes</span><span class="p">)</span> <span class="n">code_table</span>
</span></code></pre></td></tr></table></div></figure>


<p>but this works</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">added</span> <span class="ow">&lt;-</span> <span class="n">sequence</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">codes</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">addItem</span> <span class="n">root</span> <span class="n">label</span> <span class="n">codes</span><span class="p">)</span> <span class="p">(</span><span class="n">code_table</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As an aside, <code>added</code> is actually a useless value (it&rsquo;s just a list of <code>()</code>s). I don&rsquo;t care about it. All I care about is the value of <code>root</code> because I have mutated it to add nodes to it.</p>

<p>After this, I spent some time fixing off by one errors because I was translating Julia code to Haskell and Julia is 1-indexed while Haskell is 0-index. Lol. THEN IT WORKED. HUZZAH!</p>

<p>In the afternoon into the evening, I worked with Dana, Minnie, and Sophia on soldering chips, wires, and LEDs together. It was loads of fun and will continue today, I suspect.</p>

<p><img src="https://pbs.twimg.com/media/BtRShaVIUAAQ6LR.jpg:large" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Halfway, What???]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/23/halfway/"/>
    <updated>2014-07-23T09:52:02-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/23/halfway</id>
    <content type="html"><![CDATA[<p>Wow, wow, wow. This week marked the halfway point of my time at Hacker School. It&rsquo;s been an exciting time, with the incoming of the new batch (28 new Hacker Schoolers!) and 455 Broadway is much more lively than it was before. It&rsquo;s been harder to find a place to sit, which is a good problem to have. :)</p>

<p>I haven&rsquo;t blogged since last week, so a lot has happened since then:</p>

<ul>
<li>Very proud to say that I made the <code>cats</code> stream on Zulip.</li>
<li>My implementation of gunzip is undergoing debugging, so hopefully I can have that done by the end of the week.</li>
<li>Dana taught me how to solder! I soldered wires onto a strip of NeoPixels.</li>
<li>Dana and I checked out <a href="https://hackmanhattan.com/">HackManhattan</a>, a space for hardware hackers. They were kind enough to let us go through their extra parts and we found the power sources we were looking for for the party on Friday.</li>
<li>Mel Chua, our first resident, gave us very informative talks on different learning styles and how to maximize our time at Hacker School. I do sort of wish this happend on the first week for &ldquo;seconds&rdquo; since I feel like some of us floundered at figuring out how to get used to self-directedness.</li>
<li>I missed my first Friday session to go visit my mom in North Carolina.</li>
<li>I am back to being addicted to coffee. <a href="http://www.portorico.com/store/">Porto Rico Importing Co.</a> is my vice.</li>
</ul>


<p>Here&rsquo;s to another six weeks! Well, more like 5 and a half weeks. :D:D:D:D:D:D: &lt;&mdash; Some alums taught me this happy/sad combo face.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OCaml! Haskell! Gunzip!]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/15/gunzip/"/>
    <updated>2014-07-15T18:57:22-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/15/gunzip</id>
    <content type="html"><![CDATA[<p>For a couple of days, I told myself that I would study OCaml now that I have a decent grasp of Haskell. But it&rsquo;s actually been pretty
difficult to leave Haskell because I am rather enamoured with the language. &#10084;</p>

<p>I did however, manage to read through a good chunk of <a href="http://ocaml-book.com/">OCaml from the Very Beginning</a>, and work through the exercises that accompany each chapter. I found it to be a very solid introductory text, as the author makes no assumptions about the reader&rsquo;s background. I plan to finish it up at some point, and move on to <em>Real World OCaml</em>.</p>

<p>A couple of things that jumped out at me as I started learning OCaml:</p>

<ul>
<li>The standard library is pretty sparse. Will be checking out Jane Street&rsquo;s Core.</li>
<li>There are mutable data structures.</li>
<li>OCaml supports imperative and functional styles.</li>
<li>The introductory text, at least <em>OCaml from the Very Beginning</em>, emphasized understanding tail recursion (which I didn&rsquo;t really think about when learning Haskell, but maybe I did it wrong)</li>
<li>Utop is pretty cool.</li>
<li>I got confused by <code>=</code> and <code>==</code> because I wanted to use <code>==</code> but that seems to be reserved for people who really know what they&rsquo;re doing.</li>
</ul>


<p>For the past few days, I have been exploring file compression and decompression. I needed a new project and starting looking at what previous HSers had done, and I found this <a href="http://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/">blog post</a> by alumna <a href="https://twitter.com/b0rk">Julia Evans</a> on implementing gunzip in Julia. So I&rsquo;ve decided to implement it in Haskell! :D :D :D</p>

<p>I&rsquo;ve been reading up on the <a href="http://www.gzip.org/algorithm.txt">algorithm specifications</a> for inflating and deflating and the <a href="http://www.gzip.org/format.txt">format</a> information. I tried looking at the source in C but my head started to hurt, so I have been studying Julia&rsquo;s <a href="https://github.com/jvns/gzip.jl/blob/master/gzip.jl">implementation</a>, which despite me never having seen Julia code before, has been very helpful.</p>

<p>I spent today working on parsing a gzipped file&rsquo;s header and metadata information. Tomorrow I will read up more on the algorithm description and dive into implementing inflate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion Friday]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/12/recursion-friday/"/>
    <updated>2014-07-12T12:38:25-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/12/recursion-friday</id>
    <content type="html"><![CDATA[<p>Yesterday at Hacker School was Recursion Friday. Basically, a group of HSers sat down and worked on various recursive problems and brain teasers in the languages of our choice.</p>

<p>Recursion used to make me go like this:</p>

<p><img src="http://media.giphy.com/media/NoglyWTK9tCMw/giphy.gif" alt="Scared" /></p>

<p>But somewhere along the way as I was learning Haskell, recursion started to click with my previously recursion-addled brain.</p>

<p>One of the questions yesterday was to find all of the permutations of a string. After some white boarding with Denise and Georgi, talking it through with Alan and Tom, we basically came to the conclusion that the algorithm should be something like this (in pseudocode):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Permute("abcd") =
</span><span class='line'>    "a" + Permute("bcd") 
</span><span class='line'>    &lt;list concatenation&gt; 
</span><span class='line'>    "b" + Permute("acd") 
</span><span class='line'>    &lt;list concatenation&gt;
</span><span class='line'>    "c" + Permute("bcd") 
</span><span class='line'>    &lt;list concatenation&gt;
</span><span class='line'>    "d" + Permute("abc") </span></code></pre></td></tr></table></div></figure>


<p>So, generate all of the permutations of the string without one of the elements of the original string, and concat it with all possible permutations of the smaller string, then concat all of those together to get the final list of permutations.</p>

<p>After speaking with Alan about a Haskell implementation, this is what I ended up with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'>
</span><span class='line'><span class="nf">permute</span> <span class="ow">::</span> <span class="kt">Eq</span> <span class="n">a</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="n">a</span><span class="p">]]</span>
</span><span class='line'><span class="nf">permute</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">[]</span><span class="p">]</span>
</span><span class='line'><span class="nf">permute</span> <span class="n">xs</span> <span class="ow">=</span> <span class="p">[</span> <span class="n">y</span> <span class="o">|</span> <span class="n">prefix</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="p">,</span> <span class="n">y</span> <span class="ow">&lt;-</span> <span class="n">map</span> <span class="p">(</span><span class="n">prefix</span><span class="kt">:</span><span class="p">)</span>
</span><span class='line'>                   <span class="o">$</span> <span class="n">permute</span> <span class="o">$</span> <span class="n">xs</span> <span class="o">\\</span> <span class="p">[</span><span class="n">prefix</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>An obnoxiously short list comprehension.</p>

<p>Pull the prefix from the original string, map a list concatenation of the prefix, (prefix:), to the various permutations of the rest of the string. <code>\\</code> is this nifty function in the Data.List library that performs list difference, so it was an easy way to exclude the prefix from the original string (thanks to Alan for showing me that).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">permute</span> <span class="s">&quot;abcd&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="s">&quot;abcd&quot;</span><span class="p">,</span><span class="s">&quot;abdc&quot;</span><span class="p">,</span><span class="s">&quot;acbd&quot;</span><span class="p">,</span><span class="s">&quot;acdb&quot;</span><span class="p">,</span><span class="s">&quot;adbc&quot;</span><span class="p">,</span><span class="s">&quot;adcb&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;bacd&quot;</span><span class="p">,</span><span class="s">&quot;badc&quot;</span><span class="p">,</span><span class="s">&quot;bcad&quot;</span><span class="p">,</span><span class="s">&quot;bcda&quot;</span><span class="p">,</span><span class="s">&quot;bdac&quot;</span><span class="p">,</span><span class="s">&quot;bdca&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;cabd&quot;</span><span class="p">,</span><span class="s">&quot;cadb&quot;</span><span class="p">,</span><span class="s">&quot;cbad&quot;</span><span class="p">,</span><span class="s">&quot;cbda&quot;</span><span class="p">,</span><span class="s">&quot;cdab&quot;</span><span class="p">,</span><span class="s">&quot;cdba&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;dabc&quot;</span><span class="p">,</span><span class="s">&quot;dacb&quot;</span><span class="p">,</span><span class="s">&quot;dbac&quot;</span><span class="p">,</span><span class="s">&quot;dbca&quot;</span><span class="p">,</span><span class="s">&quot;dcab&quot;</span><span class="p">,</span><span class="s">&quot;dcba&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recursion still blows my mind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sometimes, Giving Up Is A-okay.]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/09/sometimes/"/>
    <updated>2014-07-09T13:16:49-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/09/sometimes</id>
    <content type="html"><![CDATA[<p>After spending about a week and a half on my Haskell <a href="https://github.com/dariajung/haskell-bittorrent">BitTorrent client</a>, I&rsquo;ve decided to give it a rest. Am I done? No. Am I close to being done? Depends on what &ldquo;done&rdquo; means (but no, probably not).</p>

<p>I won&rsquo;t lie. I felt a pang of guilt today when I decided to put the project on the backburner.</p>

<p><img src="http://media2.giphy.com/media/lrNS45C9Df904/giphy.gif" alt="Finn crying" />
</br><sub>Actually, I was something like this on the inside.</sub></p>

<p>But what I&rsquo;ve learned is that when a project stops bringing joy and feels tedious, it is much better to move onto something else so my time can be spent productively. I asked my fellow Hacker Schoolers when they felt it was an appropriate time to move on from a project, and I got a lot of great responses. I was told it was okay to abandon a project if it made me feel sad, but I could write some documentation for it to feel some closure. It also wasn&rsquo;t apparent to me that because I was getting so hung up on trying to finish this project that I was missing other valuable opportunities, and this was pointed out to me by several alums.</p>

<p>I&rsquo;m pretty glad that I asked this question, because I&rsquo;m not sure how much longer I could have dragged on the BitTorrent project. I think I&rsquo;m ready to move onto OCaml and work through <a href="https://realworldocaml.org">Real World OCaml</a> and start afresh.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bencoding and Networking]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/01/bencoding-and-networking/"/>
    <updated>2014-07-01T10:15:49-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/01/bencoding-and-networking</id>
    <content type="html"><![CDATA[<p>One of the things that I have always been fearful of is networking. Sockets, TCP/IP, and forking, all of that. In a class at university, I had done some networking in C; I remember reading <a href="http://beej.us/guide/bgnet/">Beej&rsquo;s guide to network programming</a>, and I found myself returning to it, and appreciating it a bit more this time. It&rsquo;s funny how when you&rsquo;re learning something in school, you could care less about it. You just want to get from point A to point B in the shortest way possible. But when you have the time to be in a self-directed environment like Hacker School, you find yourself wanting to revisit things that you didn&rsquo;t learn properly the first time around, wanting to tell your past self: &ldquo;You should have paid more attention when you were learning this!&rdquo;</p>

<p>So, to learn networking in Haskell, I have decided to incrementally work towards building a simple Bittorrent client. Yesterday, I read about <a href="http://en.wikipedia.org/wiki/Bencode">bencode</a>, the encoding used by the Bittorrent protocol for torrent files (metadata).</p>

<p>Bencode supports four types of values:</p>

<ul>
<li>Integers</li>
<li>(Byte) Strings</li>
<li>Lists</li>
<li>Dictionaries (Hash Maps)</li>
</ul>


<p>Integers are encoded as <code>i&lt;integer encoded in base 10 ASCII&gt;e</code>. Integers can be negative, but 0 cannot be -0.</p>

<p>ByteStrings are encoded as <code>&lt;length&gt;:&lt;contents&gt;</code>. So &ldquo;foo&rdquo; would be encoded as 3:foo. The length of the content can be 0, but cannot be negative.</p>

<p>Lists are encoded as <code>l&lt;contents&gt;e</code>. Contents are bencoded elements of the list (in order), and are concatenated. Something like &ldquo;cat31&rdquo; would be encoded as l3:cati31ee.</p>

<p>Dictionaries are encoded as <code>d&lt;contents&gt;e</code>. The keys must be bytestrings, and the dictionary is ordered lexiographically by key. The encoded key value pair follow each other immediately. {&ldquo;cat&rdquo;: &ldquo;meow&rdquo;, &ldquo;dog&rdquo;: 44} would be encoded as d3:cat4:meow3:dogi44ee.</p>

<p>After reading this, I used the <a href="http://www.haskell.org/haskellwiki/Parsec">Parsec</a> library and wrote a parser for bencoded values in Haskell. I tested it on a torrent for Ubuntu and got back this:</p>

<p><img src="http://blog.dariajung.com/images/torrent.png" alt="&quot;Metadata&quot;" /></p>

<p>We can see things like:</p>

<ul>
<li>&ldquo;announce&rdquo;: &ldquo;<a href="http://torrent.ubuntu.com:6969/announce">http://torrent.ubuntu.com:6969/announce</a>&rdquo;</li>
<li>&ldquo;announce-list&rdquo;: &ldquo;<a href="http://torrent.ubuntu.com:6969/announce">http://torrent.ubuntu.com:6969/announce</a>&rdquo;, &ldquo;<a href="http://ipv6.torrent.ubuntu.com:6969/announce">http://ipv6.torrent.ubuntu.com:6969/announce</a>&rdquo;</li>
<li>&ldquo;comment&rdquo;: &ldquo;Ubuntu CD releases.ubuntu.com&rdquo;</li>
<li>&ldquo;creation date&rdquo;: 1391706680</li>
</ul>


<p>and so on.</p>

<p>The crazy wall of text is mostly due to all of the pieces for this particular torrent.</p>

<p>After this, to get a better sense of networking in Haskell, I read up on TCP/IP and started working towards this <a href="http://www.haskell.org/haskellwiki/Implement_a_chat_server">tutorial</a> on building a multi-threaded chat server in Haskell, and getting a feel for the Network.Socket library.</p>

<p>At the very basic level: Socket &ndash;> Bind &ndash;> Listen &ndash;> Accept.</p>

<p>My networking journey will continue today&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 13]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/27/hacker-school-day-13/"/>
    <updated>2014-06-27T16:33:32-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/27/hacker-school-day-13</id>
    <content type="html"><![CDATA[<p>Day 13 of Hacker School went by pretty quickly, mostly due to some of us playing hooky to go watch the Germany vs. USA game. We were initially going to go to a German bar, but it turns out there were a lot of Germans there already (I guess they like their futbol). We ended up back tracking and found a bar called Sweet &amp; Vicious, which was sweet (their jargaritas are great), but not particularly vicious. The game was slow paced, and the atmosphere of the bar made it a nice spot to lounge.</p>

<p><img src="http://blog.dariajung.com/images/jargarita.png" alt="dat jargarita" /></p>

<p>I guess my main reason for leaving in the middle of the day was that I was in a weird headspace after the goal making workshop. I started to doubt my decisions about the things I wanted to do this summer and that was bumming me out. On top of that, I couldn&rsquo;t install <a href="http://www.haskell.org/haskellwiki/ThreadScope">threadscope</a> to save my life, and spent almost five hours trying to get that to run (yay yak-shaving) before just giving up and deciding to read <a href="http://chimera.labs.oreilly.com/books/1230000000929">Simon Marlow&rsquo;s book</a> without it.</p>

<p>I did have a productive talk with Allison yesterday. My worries were that I was working on Haskell, a language that is rather impractical for the purpose of jobs and I wasn&rsquo;t sure if I should switch to Python or not. Which turns out it was a rather silly fear to have since I am going back to school and won&rsquo;t ostensibly be looking for a new job for at least two more years. So I have decided to stick with Haskell, and will work on some side projects in Python once in a while when the mood strikes me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Days 11 &amp; 12]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/25/hacker-school-days-11-and-12/"/>
    <updated>2014-06-25T20:36:12-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/25/hacker-school-days-11-and-12</id>
    <content type="html"><![CDATA[<p>I&rsquo;m getting behind on my blogging, meep.</p>

<p>Day 11 recap:</p>

<ul>
<li>Spent half of the day trying to debug my sudoku solver&rsquo;s board parser, which was pretty difficult as everything type checked, but I was getting the wrong output.</li>
<li>Learned about the <a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci-debugger.html">GHCI interactive debugger</a>, which let me place break points and inspect variables where the execution of the program has stopped.</li>
<li>Alan gave me a quick overview of &ldquo;equational debugging&rdquo;, which is to test little snippets of your program and make sure that it is returning the right output.</li>
<li>I ended up pulling out more complicated bits of my code into smaller functions to make equational debugging more manageable.</li>
<li>Spent the rest of the day finishing up the sudoku solver. I debugged the constraint propagation aspect of the program, and then implemented the depth first search function which utilized the constraint propagation logic.</li>
</ul>


<p>Day 12 (today!), I decided to take (another) break from Haskell. I played around for most of the day with Paper.js, trying to make something beautiful, but eventually found that it didn&rsquo;t actually interest me too much. Around 3:00 pm, Stacy from Winter 2013 batch came by Hacker School to do a goal making workshop. It did really get me thinking about my time at Hacker School, and how I need to figure out when I can say that I have achieved my goal of being literate in Haskell. I think I will spend maybe a couple more weeks max on Haskell, and then switch over to Python. My main fear is that while Haskell is awesome, it isn&rsquo;t exactly a language that I will be able to work in once I become a professional software engineer.</p>

<p>After hitting a dead end with Paper.js, I decided to pivot and play around with Python. I implemented a simple echo server in Python, where the client will send back what the server sent to it. Then I got the idea to work on a GIF bot for Zulip because sometimes emoji just aren&rsquo;t enough :). You can ask gif bot &ldquo;gif me cats&rdquo; and an API query is sent to <a href="http://giphy.com/">Giphy</a>, and gif bot returns a gif that has been tagged with cats, in this example. It&rsquo;s basically done at this point, and works locally, but I&rsquo;m not sure what the protocol is for having a permanent presence from the bot. Do I serve it on AWS/Heroku? I think I will ask Allison tomorrow. I&rsquo;m also curious if I should demo this tomorrow afternoon.</p>

<p>Here is gif bot in action:</p>

<p><img src="http://blog.dariajung.com/images/gifbot.png" alt="&quot;Gif Bot in action&quot;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Days 9 &amp; 10]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/24/hacker-school-days-9-and-10/"/>
    <updated>2014-06-24T09:58:30-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/24/hacker-school-days-9-and-10</id>
    <content type="html"><![CDATA[<p>I didn&rsquo;t get a chance to blog about last Friday (Day 9) so I&rsquo;ll do a quick recap:</p>

<ul>
<li>First day of interview prep.</li>
<li>Worked on <a href="https://hackpad.com/Manage-those-phone-books-wK1MycZ5ATb">Manage those Phonebooks</a> in Python.</li>
<li>Turns out I had a lot of trouble parsing command line inputs, so I spent a good chunk of time on that before I decided to come back to it at the end.</li>
<li>This exercise made me feel a bit uncomfortable about how well I know a language. I&rsquo;ve been spending all of my time on Haskell and haven&rsquo;t touched Java or Python in a while.</li>
<li>Continued reading about Monads.</li>
</ul>


<p>Yesterday (Day 10), we received new check-in groups. It seems that they rotate every two weeks, and I&rsquo;m enjoying that as it gives me the chance to interact with more of my fellow Hacker Schoolers in a smaller setting.</p>

<p>I spent a good chunk of the morning finishing up the last assignment from Brent Yorgey&rsquo;s Haskell course programming a Risk, the <a href="https://en.wikipedia.org/wiki/Risk_(game)" target="_blank">boardgame</a>, simulator. It was cool to play around with Random generators to simulate die rolls, and also to simulate 1000 invasions (repeated calls to battle until there are no defenders remaining, or fewer than two attackers left) of varying defending and attacking army sizes. This was encompassed in a Battlefield data type, where Battlefield is defined as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">type</span> <span class="kt">Army</span> <span class="ow">=</span> <span class="kt">Int</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Battlefield</span> <span class="ow">=</span> <span class="kt">Battlefield</span>
</span><span class='line'>                   <span class="p">{</span> <span class="n">attackers</span> <span class="ow">::</span> <span class="kt">Army</span><span class="p">,</span> <span class="n">defenders</span> <span class="ow">::</span> <span class="kt">Army</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this, I ended up stumbling on Peter Norvig&rsquo;s Sudoku solver <a href="http://norvig.com/sudoku.html">paper</a> and decided to implement it in Haskell. I&rsquo;ve been struggling through lots of type errors but I was surprised and happy to find that I got so engrossed in my task that I stayed at Hacker School for almost 12 hours yesterday. It&rsquo;s really neat to be this absorbed in something, and feeling myself gain more confidence through being challenged by my own curiosities. Once I finish this up, I will definitely be needing some code review.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 8]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/19/hacker-school-day-8/"/>
    <updated>2014-06-19T21:35:35-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/19/hacker-school-day-8</id>
    <content type="html"><![CDATA[<p>End of week two. Crazy!</p>

<p>This morning, I spent a bit of time pairing with Dana and Georgi on Arduino and hardware things. Dana introduced us to <a href="http://www.firmata.org/wiki/Main_Page">Firmata</a>, a protocol for interfacing with the Arduino in different programming languages (instead of using the Arduino language, C/C++, or Assembly). She gave us examples in Node.js using <a href="https://github.com/rwaldron/johnny-five">Johnny Five</a> and Python using <a href="https://pypi.python.org/pypi/pyFirmata/0.9.5">PyFirmata</a>. I ended up playing around with the Python example and an Arduino that was set up with a potentiometer, an LED, and a servo motor. Depending on the value read from the petentiometer, the LED would blink at a different rate, and the servo would move to a different angle.</p>

<p>After seeing how this worked, and looking through the spare hardware parts at Hacker School, we found a photocell, which senses the amount of light being received. I hooked up the photocell to the breadboard and Arduino using this <a href="https://learn.adafruit.com/photocells/using-a-photocell">guide</a> from AdaFruit &#10084; and a little help from Dana, and now the LED and servo were reacting to the readings from the photocell.</p>

<p><img src="http://blog.dariajung.com/images/firmata.jpg" alt="&quot;PyFirmata + Arduino&quot;" /></p>

<p>After playing around with this, I got an idea to use a temperature and humidity sensor for garden/plant health. The Arduino would gather data, and if your plants need a little love, it would trigger something that would text you (maybe using Twilio) to tend to them. I need to order the temperature/humidity sensor before I can get started but I think this would be a fun hack that encompasses hardware and web development.</p>

<p>Once the hardware workshop concluded, I went back to Haskell where I started reading about Monads (<em>eeep</em>). Actually, Monads so far haven&rsquo;t been that scary. Confusing, yes, but not scary. Just another level of complexity up from an Applicative Functor. In fact, all Monads are Applicative Functors. The distinguishing factor is that Monads have the (>>=), or <em>bind</em>, method in their definition.</p>

<p>A Monad is defined as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">class</span> <span class="kt">Monad</span> <span class="n">m</span> <span class="kr">where</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&gt;&gt;=</span><span class="p">)</span> <span class="ow">::</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span><span class='line'>    <span class="n">return</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</span><span class='line'>    <span class="n">fail</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>From what I can understand, (>>=) basically lets you pass some value of a Monadic context to a function that expects a normal value, and outputs a Monadic value.</p>

<p>Something else that struck me was that the definition of (>>) seems exactly like the definition of (*>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">Monad</span> <span class="n">m</span> <span class="ow">=&gt;</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span><span class='line'><span class="p">(</span><span class="o">*&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">Applicative</span> <span class="n">f</span> <span class="ow">=&gt;</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>So cool.</p>

<p><code>(&gt;&gt;)</code> and <code>(*&gt;)</code> ignore the result of the first monadic value/applicative functor but <strong>not</strong> their effects.</p>

<p>I ended up reading most of LYaH&rsquo;s <a href="http://learnyouahaskell.com/a-fistful-of-monads">chapter</a> on Monads, and have gotten a better understanding of both applicative functors and monads. I still have lots of reading material left, so I will continue that tomorrow.</p>

<p>As today was Thursday, Hacker Schoolers demo&rsquo;d projects that they had been working on. Many of the projects were interesting, challenging, and quite frankly, a bit intimidating. They ranged from maze/percolater solvers, to CPUs in Clojure, to letting you edit Jekyll blogs in the browser! I wondered to myself if I would ever be presenting at a demo session this summer. The thought did cross my mind that maybe I should give up on learning Haskell because it is getting incredibly difficult for me to process, and everyone else seemed to be much more productive with their time than I was. I don&rsquo;t know, I will think on this more.</p>

<p>Mihai&rsquo;s demo on creating music and outputting the result as MIDI files actually inspired me to search for something that would allow me to do that in Haskell. I was able to come across the <a href="https://github.com/Euterpea/Euterpea">Euterpea</a> library, which looks very promising. I think it would be fun to create a Markov Chain that took training data of different songs, and created new compositions. I hope to play around with this some in the coming days.</p>

<p>To conclude the day, Marisa, Alex, Rachel, and I started watching a documentary on the font Helvetica. It was very interesting to see how Helvetica&rsquo;s usage has evolved over time, and also the connotations that it has to people. Going from a clean, revolutionary font to an overused &ldquo;nameless&rdquo; font (as it is now employed by many corporations and government agencies) has given Helvetica an interesting reputation. Some people see it as the font of wars (Vietnam, Iraq war), and some see it as the quintessential modern typeface; a debate between modernists and postmodernists.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 7]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/18/hacker-school-day-7/"/>
    <updated>2014-06-18T16:22:18-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/18/hacker-school-day-7</id>
    <content type="html"><![CDATA[<p>I can&rsquo;t believe it has already been a week and a half at Hacker School. Wow. 12 weeks seems like a lot but the time is already flying by.</p>

<p>Today, I decided to resume my studies in Haskell. I worked on the week 11 assignment for Brent Yorgey&rsquo;s Haskell course. I continued working with the <code>Parser</code> data type, implementing some utilies and several new Parsers.</p>

<p>This is where I was introduced to <code>*&gt;</code> and <code>&lt;*</code> and the concept of lifting in functional programming (which I am still having a hard time fully understanding).</p>

<p>Described in the source for module <code>Control.Applicative</code> as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- | Sequence actions, discarding the value of the first argument.</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*&gt;</span><span class="p">)</span> <span class="ow">=</span> <span class="n">liftA2</span> <span class="p">(</span><span class="n">const</span> <span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- | Sequence actions, discarding the value of the second argument.</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&lt;*</span><span class="p">)</span> <span class="ow">::</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">a</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&lt;*</span><span class="p">)</span> <span class="ow">=</span> <span class="n">liftA2</span> <span class="n">const</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using some examples I worked out by hand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="p">(</span><span class="n">spaces</span> <span class="o">*&gt;</span> <span class="n">posInt</span><span class="p">)</span> <span class="s">&quot; 345&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I understood this computation as first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">spaces</span> <span class="s">&quot; 345&quot;</span>
</span><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span> <span class="s">&quot;345&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>" "</code>, the result, is disregarded. We pass on &ldquo;345&rdquo; to the next call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">posInt</span> <span class="s">&quot;345&quot;</span>
</span><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="mi">345</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we are ignoring the result of <code>runParser spaces " 345"</code>, the final result is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="mi">345</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the same inputs, but for <code>&lt;*</code> this time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="p">(</span><span class="n">spaces</span> <span class="o">&lt;*</span> <span class="n">posInt</span><span class="p">)</span> <span class="s">&quot; 345&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">spaces</span> <span class="s">&quot; 345&quot;</span>
</span><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span> <span class="s">&quot;345&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This time, we <em>don&rsquo;t</em> disregard <code>" "</code>.</p>

<p>We pass on &ldquo;345&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">posInt</span> <span class="s">&quot;345&quot;</span>
</span><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="mi">345</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are ignoring <code>345</code>, the result of <code>runParser posInt "345"</code>.</p>

<p>The final result ends up being:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool, how about one more.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="p">(</span><span class="n">ident</span> <span class="o">&lt;*</span> <span class="n">posInt</span><span class="p">)</span> <span class="s">&quot;hello 345&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">ident</span> <span class="s">&quot;hello 345&quot;</span>
</span><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot; 345&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We keep <code>"hello"</code> and pass on <code>" 345"</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">posInt</span> <span class="s">&quot; 345&quot;</span>
</span><span class='line'><span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure>


<p>Uh oh. We got <code>Nothing</code>. There is no state for us to use in the return <code>Maybe</code> tuple, so we end up with <code>Nothing</code>.</p>

<ul>
<li><code>posInt :: Parser Integer</code> : Checks for positive integers in String input.</li>
<li><code>spaces :: Parser String</code> : Checks for spaces in String input.</li>
<li><code>ident :: Parser String</code> : an identiﬁer can be any nonempty sequence of letters and digits, except that it may not start with a digit.</li>
</ul>


<p>I got this far in my understanding of these functions, but I still do not quite understand what is being &ldquo;lifted&rdquo; behind the scenes.</p>

<p>Lifting in the case of <code>(a -&gt; b) -&gt; f a -&gt; f b</code> is defined in LYaH as &ldquo;a function that takes a function and returns a new function that&rsquo;s just like the old one, only it takes a functor as a parameter and returns a functor as the result.&rdquo; I will mull this over more tonight, and perhaps ask Alan or some alumni in Zulip tomorrow if I am still having a hard time understanding the concept.</p>

<p>For about 30 minutes, I worked through the first six problems of <a href="http://www.haskell.org/haskellwiki/99_questions">99 Haskell Problems</a>. It&rsquo;s been pretty fun to revist things I learned a while back now that I am getting wrapped up in the intricacies of Haskell. My brain feels like it is exploding all the time.</p>

<p>Learning Haskell has been challenging. It is definitely rewarding, but there are many times when I feel discouraged because I don&rsquo;t know when I will understand things like Applicative Functors like the back of my hand. I often feel afraid that I <em>won&rsquo;t</em> ever understand these things, but then I tell myself, what&rsquo;s the rush?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 6]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/17/hacker-school-day-6/"/>
    <updated>2014-06-17T17:09:44-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/17/hacker-school-day-6</id>
    <content type="html"><![CDATA[<p>Today, I decided to take a mini break from Haskell (erm, I still did a wee bit of Haskell) and work on a one off project. I got in a bit early, around 9:30 am to finish up the <a href="http://blog.dariajung.com/blog/2014/06/16/applicative-functors/">Applicative Functors</a> blog post. I was pretty impressed with how many Hacker Schoolers were already in at that point, and felt eager to start working.</p>

<p>The little bit of Haskell I did today was to implement an <code>Alternative</code> instance for a <code>Parser</code>.</p>

<p>If we remember from my previous blogpost, <code>Parser</code> is defined as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">newtype</span> <span class="kt">Parser</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Parser</span> <span class="p">{</span> <span class="n">runParser</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="kt">String</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Applicative Parser</code> instance is useful for making parsers of fixed and simple formats. Because we want to be able to handle
the concept of <em>choice</em>, we turn to the <code>Alternative</code> class.</p>

<p>The <code>Alternative</code> class is defined something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">class</span> <span class="kt">Applicative</span> <span class="n">f</span> <span class="ow">=&gt;</span> <span class="kt">Alternative</span> <span class="n">f</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">empty</span> <span class="ow">::</span> <span class="n">f</span> <span class="n">a</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&lt;|&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>(&lt;|>) denotes a choice, so something like <code>p &lt;|&gt; q</code> means a choice between <code>p</code> or <code>q</code>.</p>

<p>So, my <code>Alternative</code> instance ended up being:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">instance</span> <span class="kt">Alternative</span> <span class="kt">Parser</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">empty</span> <span class="ow">=</span> <span class="kt">Parser</span> <span class="o">$</span> <span class="n">const</span> <span class="kt">Nothing</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">&lt;|&gt;</span> <span class="n">q</span> <span class="ow">=</span> <span class="kt">Parser</span> <span class="o">$</span> <span class="nf">\</span><span class="n">s</span> <span class="ow">-&gt;</span> <span class="n">runParser</span> <span class="n">p</span> <span class="n">s</span> <span class="o">&lt;|&gt;</span> <span class="n">runParser</span> <span class="n">q</span> <span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<p>An important hint here is that there is already an Alternative instance for Maybe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">instance</span> <span class="kt">Alternative</span> <span class="kt">Maybe</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">empty</span> <span class="ow">=</span> <span class="kt">Nothing</span>
</span><span class='line'>    <span class="kt">Nothing</span> <span class="o">&lt;|&gt;</span> <span class="n">p</span> <span class="ow">=</span> <span class="n">p</span>
</span><span class='line'>    <span class="kt">Just</span> <span class="n">x</span> <span class="o">&lt;|&gt;</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">Just</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means that we can simply call <code>runParser p s</code> and <code>runParser q s</code>, which gives us Maybe tuples. We can then use (&lt;|>) from the <code>Alternative</code> instance of <code>Maybe</code> to choose between those two tuples and pass it to the Parser constructor.</p>

<p>If <code>runParser p s</code> succeeds, return its results, else try <code>runParser q s</code>. If that succeeds, return its results. Otherwise, a <code>Nothing</code> will be returned.</p>

<p>Pretty nifty!</p>

<p>The rest of today, I worked on a very simple <a href="https://github.com/dariajung/url_shortener">URL shortener</a>.</p>

<p>I found a tutorial online that used the md5 hashing algorithm and a base 64 encoding to generate a randomized string. The last five characters of this were taken, sanitized, and then used as the key for a key value store in Redis as well as a slug.</p>

<p>I whipped up a simple Flask app for 301 redirects from the shortened URL to the original URL. A quick lookup in Redis, and then a <code>return redirect(location, 301)</code> call did the trick.</p>

<p><code>http://blog.dariajung.com</code> results in <code>http://localhost:5000/iJp4fHs</code>. When I go to that URL, I am then redirected to my original URL.</p>

<p>The functionality is all very simple, so I don&rsquo;t check that the protocol identifier and such are in the URL. That might be for another day.</p>

<p>Overall, I think today was rather productive!</p>
]]></content>
  </entry>
  
</feed>
