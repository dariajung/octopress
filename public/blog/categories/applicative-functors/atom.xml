<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Applicative Functors | Hacker School Log]]></title>
  <link href="http://blog.dariajung.com//blog/categories/applicative-functors/atom.xml" rel="self"/>
  <link href="http://blog.dariajung.com//"/>
  <updated>2014-06-17T18:51:00-04:00</updated>
  <id>http://blog.dariajung.com//</id>
  <author>
    <name><![CDATA[Daria Jung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Applicative Functors]]></title>
    <link href="http://blog.dariajung.com//blog/2014/06/16/applicative-functors/"/>
    <updated>2014-06-16T17:02:53-04:00</updated>
    <id>http://blog.dariajung.com//blog/2014/06/16/applicative-functors</id>
    <content type="html"><![CDATA[<p>Today at Hacker School, I was studying functors and applicative functors in Haskell. Functors are structures that &ldquo;can be mapped over&rdquo; [1]. So, applicative functors are functors that allow functions to be applied <em>within</em> a functor. Functor-ception.</p>

<p>This concept proved to be a pretty difficult one for me to grasp today. I wrangled with it for several hours, reading and re-reading Learn You a Haskell&rsquo;s <a href="http://learnyouahaskell.com/functors-applicative-functors-and-monoids">explanation</a> for them before I broke down and asked for help on the Haskell Zuplip thread. (Now I know that I should ask for help if I can&rsquo;t figure something out in 15 minutes on my own.)</p>

<p>The particular problem I was sweating over was writing an Applicative instance for a <code>Parser</code>:</p>

<p><code>haskell
newtype Parser a = Parser { runParser :: String -&gt; Maybe (a, String) }
</code></p>

<p>I was eventually able to come up with this:</p>

<p>```haskell
instance Applicative Parser where</p>

<pre><code>pure x = Parser $ \s -&gt; Just (x, s)
p &lt;*&gt; q = Parser $ \s -&gt;
        case (runParser p s) of 
            Nothing -&gt; Nothing
            Just (f, s') -&gt; case (runParser q s') of
                Nothing -&gt; Nothing
                Just (x, s'') -&gt; Just (f x, s'')
</code></pre>

<p>```</p>

<p>Applicative instances have a <code>pure</code> method and a <code>&lt;*&gt;</code> method. <code>Pure</code> is simple enough. It has a type declaration of <code>pure :: a -&gt; f a</code>. Basically, it takes a value of any type, and returns that value wrapped in an applicative functor. Where I had trouble was implementing <code>&lt;*&gt;</code>. <code>&lt;*&gt;</code> has a type declaration of <code>f (a -&gt; b) -&gt; f a -&gt; f b</code>. Basically, it is like <code>fmap</code>, but it takes a functor with a function in it, and another functor. The function from the first functor is sort of mapped over the value in the second functor.</p>

<p>Chen, Hacker School W &lsquo;13, was a saint and guided me in grasping the intuition behind writing this applicative instance. <code>P</code> and <code>q</code> are both functors here. <code>P</code>, however, is the functor that holds a function within it. In order to apply this function to the second functor, he was able to explain to me that I needed to &ldquo;unwrap&rdquo; the each functor and pass each state on to the subsequent action. In this case, that would be to call <code>runParser</code> on the functor <code>p</code> and the first state <code>s</code>, which would return a type of <code>Maybe ((a-&gt;b), String)</code>. This is where the cases come in. The result of <code>runparser p s</code> could either be <code>Nothing</code> or <code>Just (f, s')</code>, where <code>f</code> is of type declaration <code>(a-&gt;b)</code> and <code>s'</code> is the second state. In the case of <code>Nothing</code>, we return <code>Nothing</code> because there is nothing to pass on to the second functor. On the other hand, we again run <code>runParser</code> to &ldquo;unwrap&rdquo; the second functor. Just as before, in the case of <code>Nothing</code>, we return <code>Nothing</code>. Otherwise, we get <code>Just (x, s'')</code>, where <code>x</code> is of type <code>a</code> and <code>s''</code> is the third state. With this, we can now apply <code>f</code> on <code>x</code> to go from something of type <code>a</code> to type <code>b</code>, and return the third state <code>s''</code>, resulting in <code>Just (f x, s'')</code>.</p>

<p>Whew. I definitely learned a ton doing this. I hope my explaination made sense!</p>

<p>Resources <br/>
[1] <a href="http://en.wikibooks.org/wiki/Haskell/Applicative_Functors">Haskell/Applicative Functors</a></p>
]]></content>
  </entry>
  
</feed>
