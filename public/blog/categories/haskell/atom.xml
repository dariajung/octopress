<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Haskell | Hacker School Log]]></title>
  <link href="http://blog.dariajung.com/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://blog.dariajung.com/"/>
  <updated>2014-06-27T16:51:27-04:00</updated>
  <id>http://blog.dariajung.com/</id>
  <author>
    <name><![CDATA[Daria Jung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 13]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/27/hacker-school-day-13/"/>
    <updated>2014-06-27T16:33:32-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/27/hacker-school-day-13</id>
    <content type="html"><![CDATA[<p>Day 13 of Hacker School went by pretty quickly, mostly due to some of us playing hooky to go watch the Germany vs. USA game. We were initially going to go to a German bar, but it turns out there were a lot of Germans there already (I guess they like their futbol). We ended up back tracking and found a bar called Sweet &amp; Vicious, which was sweet (their jargaritas are great), but not particularly vicious. The game was slow paced, and the atmosphere of the bar made it a nice spot to lounge.</p>

<p style="text-align: center;"><img src="images/jargarita.png" style="width: 50%;"></p>


<p>I guess my main reason for leaving in the middle of the day was that I was in a weird headspace after the goal making workshop. I started to doubt my decisions about the things I wanted to do this summer and that was bumming me out. On top of that, I couldn&rsquo;t install <a href="http://www.haskell.org/haskellwiki/ThreadScope">threadscope</a> to save my life, and spent almost five hours trying to get that to run (yay yak-shaving) before just giving up and deciding to read <a href="http://chimera.labs.oreilly.com/books/1230000000929">Simon Marlow&rsquo;s book</a> without it.</p>

<p>I did have a productive talk with Allison yesterday. My worries were that I was working on Haskell, a language that is rather impractical for the purpose of jobs and I wasn&rsquo;t sure if I should switch to Python or not. Which turns out it was a rather silly fear to have since I am going back to school and won&rsquo;t ostensibly be looking for a new job for at least two more years. So I have decided to stick with Haskell, and will work on some side projects in Python once in a while when the mood strikes me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Days 11 &amp; 12]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/25/hacker-school-days-11-and-12/"/>
    <updated>2014-06-25T20:36:12-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/25/hacker-school-days-11-and-12</id>
    <content type="html"><![CDATA[<p>I&rsquo;m getting behind on my blogging, meep.</p>

<p>Day 11 recap:</p>

<ul>
<li>Spent half of the day trying to debug my sudoku solver&rsquo;s board parser, which was pretty difficult as everything type checked, but I was getting the wrong output.</li>
<li>Learned about the <a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci-debugger.html">GHCI interactive debugger</a>, which let me place break points and inspect variables where the execution of the program has stopped.</li>
<li>Alan gave me a quick overview of &ldquo;equational debugging&rdquo;, which is to test little snippets of your program and make sure that it is returning the right output.</li>
<li>I ended up pulling out more complicated bits of my code into smaller functions to make equational debugging more manageable.</li>
<li>Spent the rest of the day finishing up the sudoku solver. I debugged the constraint propagation aspect of the program, and then implemented the depth first search function which utilized the constraint propagation logic.</li>
</ul>


<p>Day 12 (today!), I decided to take (another) break from Haskell. I played around for most of the day with Paper.js, trying to make something beautiful, but eventually found that it didn&rsquo;t actually interest me too much. Around 3:00 pm, Stacy from Winter 2013 batch came by Hacker School to do a goal making workshop. It did really get me thinking about my time at Hacker School, and how I need to figure out when I can say that I have achieved my goal of being literate in Haskell. I think I will spend maybe a couple more weeks max on Haskell, and then switch over to Python. My main fear is that while Haskell is awesome, it isn&rsquo;t exactly a language that I will be able to work in once I become a professional software engineer.</p>

<p>After hitting a dead end with Paper.js, I decided to pivot and play around with Python. I implemented a simple echo server in Python, where the client will send back what the server sent to it. Then I got the idea to work on a GIF bot for Zulip because sometimes emoji just aren&rsquo;t enough :). You can ask gif bot &ldquo;gif me cats&rdquo; and an API query is sent to <a href="http://giphy.com/">Giphy</a>, and gif bot returns a gif that has been tagged with cats, in this example. It&rsquo;s basically done at this point, and works locally, but I&rsquo;m not sure what the protocol is for having a permanent presence from the bot. Do I serve it on AWS/Heroku? I think I will ask Allison tomorrow. I&rsquo;m also curious if I should demo this tomorrow afternoon.</p>

<p>Here is gif bot in action:</p>

<p><img src="/images/gifbot.png" alt="&quot;Gif Bot in action&quot;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Days 9 &amp; 10]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/24/hacker-school-days-9-and-10/"/>
    <updated>2014-06-24T09:58:30-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/24/hacker-school-days-9-and-10</id>
    <content type="html"><![CDATA[<p>I didn&rsquo;t get a chance to blog about last Friday (Day 9) so I&rsquo;ll do a quick recap:</p>

<ul>
<li>First day of interview prep.</li>
<li>Worked on <a href="https://hackpad.com/Manage-those-phone-books-wK1MycZ5ATb">Manage those Phonebooks</a> in Python.</li>
<li>Turns out I had a lot of trouble parsing command line inputs, so I spent a good chunk of time on that before I decided to come back to it at the end.</li>
<li>This exercise made me feel a bit uncomfortable about how well I know a language. I&rsquo;ve been spending all of my time on Haskell and haven&rsquo;t touched Java or Python in a while.</li>
<li>Continued reading about Monads.</li>
</ul>


<p>Yesterday (Day 10), we received new check-in groups. It seems that they rotate every two weeks, and I&rsquo;m enjoying that as it gives me the chance to interact with more of my fellow Hacker Schoolers in a smaller setting.</p>

<p>I spent a good chunk of the morning finishing up the last assignment from Brent Yorgey&rsquo;s Haskell course programming a Risk, the <a href="https://en.wikipedia.org/wiki/Risk_(game)" target="_blank">boardgame</a>, simulator. It was cool to play around with Random generators to simulate die rolls, and also to simulate 1000 invasions (repeated calls to battle until there are no defenders remaining, or fewer than two attackers left) of varying defending and attacking army sizes. This was encompassed in a Battlefield data type, where Battlefield is defined as:</p>

<p>```haskell
type Army = Int</p>

<p>data Battlefield = Battlefield</p>

<pre><code>               { attackers :: Army, defenders :: Army }
</code></pre>

<p>```</p>

<p>After this, I ended up stumbling on Peter Norvig&rsquo;s Sudoku solver <a href="http://norvig.com/sudoku.html">paper</a> and decided to implement it in Haskell. I&rsquo;ve been struggling through lots of type errors but I was surprised and happy to find that I got so engrossed in my task that I stayed at Hacker School for almost 12 hours yesterday. It&rsquo;s really neat to be this absorbed in something, and feeling myself gain more confidence through being challenged by my own curiosities. Once I finish this up, I will definitely be needing some code review.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 8]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/19/hacker-school-day-8/"/>
    <updated>2014-06-19T21:35:35-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/19/hacker-school-day-8</id>
    <content type="html"><![CDATA[<p>End of week two. Crazy!</p>

<p>This morning, I spent a bit of time pairing with Dana and Georgi on Arduino and hardware things. Dana introduced us to <a href="http://www.firmata.org/wiki/Main_Page">Firmata</a>, a protocol for interfacing with the Arduino in different programming languages (instead of using the Arduino language, C/C++, or Assembly). She gave us examples in Node.js using <a href="https://github.com/rwaldron/johnny-five">Johnny Five</a> and Python using <a href="https://pypi.python.org/pypi/pyFirmata/0.9.5">PyFirmata</a>. I ended up playing around with the Python example and an Arduino that was set up with a potentiometer, an LED, and a servo motor. Depending on the value read from the petentiometer, the LED would blink at a different rate, and the servo would move to a different angle.</p>

<p>After seeing how this worked, and looking through the spare hardware parts at Hacker School, we found a photocell, which senses the amount of light being received. I hooked up the photocell to the breadboard and Arduino using this <a href="https://learn.adafruit.com/photocells/using-a-photocell">guide</a> from AdaFruit &#10084; and a little help from Dana, and now the LED and servo were reacting to the readings from the photocell.</p>

<p><img src="/images/firmata.jpg" alt="&quot;PyFirmata + Arduino&quot;" /></p>

<p>After playing around with this, I got an idea to use a temperature and humidity sensor for garden/plant health. The Arduino would gather data, and if your plants need a little love, it would trigger something that would text you (maybe using Twilio) to tend to them. I need to order the temperature/humidity sensor before I can get started but I think this would be a fun hack that encompasses hardware and web development.</p>

<p>Once the hardware workshop concluded, I went back to Haskell where I started reading about Monads (<em>eeep</em>). Actually, Monads so far haven&rsquo;t been that scary. Confusing, yes, but not scary. Just another level of complexity up from an Applicative Functor. In fact, all Monads are Applicative Functors. The distinguishing factor is that Monads have the (>>=), or <em>bind</em>, method in their definition.</p>

<p>A Monad is defined as:</p>

<p>```haskell
class Monad m where</p>

<pre><code>(&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b
(&gt;&gt;) :: m a -&gt; m b -&gt; m b
return :: a -&gt; m a
fail :: String -&gt; m a
</code></pre>

<p>```</p>

<p>From what I can understand, (>>=) basically lets you pass some value of a Monadic context to a function that expects a normal value, and outputs a Monadic value.</p>

<p>Something else that struck me was that the definition of (>>) seems exactly like the definition of (*>):</p>

<p><code>haskell
(&gt;&gt;) :: Monad m =&gt; m a -&gt; m b -&gt; m b
(*&gt;) :: Applicative f =&gt; f a -&gt; f b -&gt; f b
</code></p>

<p>So cool.</p>

<p><code>(&gt;&gt;)</code> and <code>(*&gt;)</code> ignore the result of the first monadic value/applicative functor but <strong>not</strong> their effects.</p>

<p>I ended up reading most of LYaH&rsquo;s <a href="http://learnyouahaskell.com/a-fistful-of-monads">chapter</a> on Monads, and have gotten a better understanding of both applicative functors and monads. I still have lots of reading material left, so I will continue that tomorrow.</p>

<p>As today was Thursday, Hacker Schoolers demo&rsquo;d projects that they had been working on. Many of the projects were interesting, challenging, and quite frankly, a bit intimidating. They ranged from maze/percolater solvers, to CPUs in Clojure, to letting you edit Jekyll blogs in the browser! I wondered to myself if I would ever be presenting at a demo session this summer. The thought did cross my mind that maybe I should give up on learning Haskell because it is getting incredibly difficult for me to process, and everyone else seemed to be much more productive with their time than I was. I don&rsquo;t know, I will think on this more.</p>

<p>Mihai&rsquo;s demo on creating music and outputting the result as MIDI files actually inspired me to search for something that would allow me to do that in Haskell. I was able to come across the <a href="https://github.com/Euterpea/Euterpea">Euterpea</a> library, which looks very promising. I think it would be fun to create a Markov Chain that took training data of different songs, and created new compositions. I hope to play around with this some in the coming days.</p>

<p>To conclude the day, Marisa, Alex, Rachel, and I started watching a documentary on the font Helvetica. It was very interesting to see how Helvetica&rsquo;s usage has evolved over time, and also the connotations that it has to people. Going from a clean, revolutionary font to an overused &ldquo;nameless&rdquo; font (as it is now employed by many corporations and government agencies) has given Helvetica an interesting reputation. Some people see it as the font of wars (Vietnam, Iraq war), and some see it as the quintessential modern typeface; a debate between modernists and postmodernists.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 7]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/18/hacker-school-day-7/"/>
    <updated>2014-06-18T16:22:18-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/18/hacker-school-day-7</id>
    <content type="html"><![CDATA[<p>I can&rsquo;t believe it has already been a week and a half at Hacker School. Wow. 12 weeks seems like a lot but the time is already flying by.</p>

<p>Today, I decided to resume my studies in Haskell. I worked on the week 11 assignment for Brent Yorgey&rsquo;s Haskell course. I continued working with the <code>Parser</code> data type, implementing some utilies and several new Parsers.</p>

<p>This is where I was introduced to <code>*&gt;</code> and <code>&lt;*</code> and the concept of lifting in functional programming (which I am still having a hard time fully understanding).</p>

<p>Described in the source for module <code>Control.Applicative</code> as:</p>

<p>```haskell
&mdash; | Sequence actions, discarding the value of the first argument.</p>

<pre><code>(*&gt;) :: f a -&gt; f b -&gt; f b
(*&gt;) = liftA2 (const id)
</code></pre>

<p>```
and</p>

<p>```haskell
&mdash; | Sequence actions, discarding the value of the second argument.</p>

<pre><code>(&lt;*) :: f a -&gt; f b -&gt; f a
(&lt;*) = liftA2 const
</code></pre>

<p>```</p>

<p>Using some examples I worked out by hand:</p>

<p><code>haskell
ghci&gt; runParser (spaces *&gt; posInt) " 345"
</code></p>

<p>I understood this computation as first:</p>

<p><code>haskell
ghci&gt; runParser spaces " 345"
Just (" ", "345")
</code>
The <code>" "</code>, the result, is disregarded. We pass on &ldquo;345&rdquo; to the next call:</p>

<p><code>haskell
ghci&gt; runParser posInt "345"
Just (345, "")
</code></p>

<p>Since we are ignoring the result of <code>runParser spaces " 345"</code>, the final result is:</p>

<p><code>haskell
Just (345, "")
</code></p>

<p>Using the same inputs, but for <code>&lt;*</code> this time:</p>

<p><code>haskell
ghci&gt; runParser (spaces &lt;* posInt) " 345"
</code></p>

<p>First we run:</p>

<p><code>haskell
ghci&gt; runParser spaces " 345"
Just (" ", "345")
</code></p>

<p>This time, we <em>don&rsquo;t</em> disregard <code>" "</code>.</p>

<p>We pass on &ldquo;345&rdquo;:</p>

<p><code>haskell
ghci&gt; runParser posInt "345"
Just (345, "")
</code></p>

<p>Here we are ignoring <code>345</code>, the result of <code>runParser posInt "345"</code>.</p>

<p>The final result ends up being:</p>

<p><code>haskell
Just (" ", "")
</code>
Cool, how about one more.</p>

<p><code>haskell
ghci&gt; runParser (ident &lt;* posInt) "hello 345"
</code></p>

<p><code>haskell
ghci&gt; runParser ident "hello 345"
Just ("hello", " 345")
</code></p>

<p>We keep <code>"hello"</code> and pass on <code>" 345"</code>.</p>

<p><code>haskell
ghci&gt; runParser posInt " 345"
Nothing
</code></p>

<p>Uh oh. We got <code>Nothing</code>. There is no state for us to use in the return <code>Maybe</code> tuple, so we end up with <code>Nothing</code>.</p>

<ul>
<li><code>posInt :: Parser Integer</code> : Checks for positive integers in String input.</li>
<li><code>spaces :: Parser String</code> : Checks for spaces in String input.</li>
<li><code>ident :: Parser String</code> : an identiﬁer can be any nonempty sequence of letters and digits, except that it may not start with a digit.</li>
</ul>


<p>I got this far in my understanding of these functions, but I still do not quite understand what is being &ldquo;lifted&rdquo; behind the scenes.</p>

<p>Lifting in the case of <code>(a -&gt; b) -&gt; f a -&gt; f b</code> is defined in LYaH as &ldquo;a function that takes a function and returns a new function that&rsquo;s just like the old one, only it takes a functor as a parameter and returns a functor as the result.&rdquo; I will mull this over more tonight, and perhaps ask Alan or some alumni in Zulip tomorrow if I am still having a hard time understanding the concept.</p>

<p>For about 30 minutes, I worked through the first six problems of <a href="http://www.haskell.org/haskellwiki/99_questions">99 Haskell Problems</a>. It&rsquo;s been pretty fun to revist things I learned a while back now that I am getting wrapped up in the intricacies of Haskell. My brain feels like it is exploding all the time.</p>

<p>Learning Haskell has been challenging. It is definitely rewarding, but there are many times when I feel discouraged because I don&rsquo;t know when I will understand things like Applicative Functors like the back of my hand. I often feel afraid that I <em>won&rsquo;t</em> ever understand these things, but then I tell myself, what&rsquo;s the rush?</p>
]]></content>
  </entry>
  
</feed>
