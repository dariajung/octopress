<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Haskell | Hacker School Log]]></title>
  <link href="http://blog.dariajung.com/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://blog.dariajung.com/"/>
  <updated>2014-07-12T12:58:07-04:00</updated>
  <id>http://blog.dariajung.com/</id>
  <author>
    <name><![CDATA[Daria Jung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Recursion Friday]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/12/recursion-friday/"/>
    <updated>2014-07-12T12:38:25-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/12/recursion-friday</id>
    <content type="html"><![CDATA[<p>Yesterday at Hacker School was Recursion Friday. Basically, a group of HSers sat down and worked on various recursive problems and brain teasers in the languages of our choice.</p>

<p>Recursion used to make me go like this:</p>

<p><img src="http://media.giphy.com/media/NoglyWTK9tCMw/giphy.gif" alt="Scared" /></p>

<p>But somewhere along the way as I was learning Haskell, recursion started to click with my previously recursion-addled brain.</p>

<p>One of the questions yesterday was to find all of the permutations of a string. After some white boarding with Denise and Georgi, talking it through with Alan and Tom, we basically came to the conclusion that the algorithm should be something like this (in pseudocode):</p>

<p>```
Permute(&ldquo;abcd&rdquo;) =</p>

<pre><code>"a" + Permute("bcd") 
&lt;list concatenation&gt; 
"b" + Permute("acd") 
&lt;list concatenation&gt;
"c" + Permute("bcd") 
&lt;list concatenation&gt;
"d" + Permute("abc") 
</code></pre>

<p>```</p>

<p>So, generate all of the permutations of the string without one of the elements of the original string, and concat it with all possible permutations of the smaller string, then concat all of those together to get the final list of permutations.</p>

<p>After speaking with Alan about a Haskell implementation, this is what I ended up with</p>

<p>```haskell
import Data.List</p>

<p>permute :: Eq a => [a] &ndash;> [[a]]
permute [] = [[]]
permute xs = [ y | prefix &lt;&ndash; xs, y &lt;&ndash; map (prefix:)</p>

<pre><code>               $ permute $ xs \\ [prefix]]
</code></pre>

<p>```</p>

<p>An obnoxiously short list comprehension.</p>

<p>Pull the prefix from the original string, map a list concatenation of the prefix, (prefix:), to the various permutations of the rest of the string. <code>\\</code> is this nifty function in the Data.List library that performs list difference, so it was an easy way to exclude the prefix from the original string (thanks to Alan for showing me that).</p>

<p>```haskell
ghci> permute &ldquo;abcd&rdquo;</p>

<p>[&ldquo;abcd&rdquo;,&ldquo;abdc&rdquo;,&ldquo;acbd&rdquo;,&ldquo;acdb&rdquo;,&ldquo;adbc&rdquo;,&ldquo;adcb&rdquo;,
&ldquo;bacd&rdquo;,&ldquo;badc&rdquo;,&ldquo;bcad&rdquo;,&ldquo;bcda&rdquo;,&ldquo;bdac&rdquo;,&ldquo;bdca&rdquo;,
&ldquo;cabd&rdquo;,&ldquo;cadb&rdquo;,&ldquo;cbad&rdquo;,&ldquo;cbda&rdquo;,&ldquo;cdab&rdquo;,&ldquo;cdba&rdquo;,
&ldquo;dabc&rdquo;,&ldquo;dacb&rdquo;,&ldquo;dbac&rdquo;,&ldquo;dbca&rdquo;,&ldquo;dcab&rdquo;,&ldquo;dcba&rdquo;]
```</p>

<p>Recursion still blows my mind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bencoding and Networking]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/01/bencoding-and-networking/"/>
    <updated>2014-07-01T10:15:49-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/01/bencoding-and-networking</id>
    <content type="html"><![CDATA[<p>One of the things that I have always been fearful of is networking. Sockets, TCP/IP, and forking, all of that. In a class at university, I had done some networking in C; I remember reading <a href="http://beej.us/guide/bgnet/">Beej&rsquo;s guide to network programming</a>, and I found myself returning to it, and appreciating it a bit more this time. It&rsquo;s funny how when you&rsquo;re learning something in school, you could care less about it. You just want to get from point A to point B in the shortest way possible. But when you have the time to be in a self-directed environment like Hacker School, you find yourself wanting to revisit things that you didn&rsquo;t learn properly the first time around, wanting to tell your past self: &ldquo;You should have paid more attention when you were learning this!&rdquo;</p>

<p>So, to learn networking in Haskell, I have decided to incrementally work towards building a simple Bittorrent client. Yesterday, I read about <a href="http://en.wikipedia.org/wiki/Bencode">bencode</a>, the encoding used by the Bittorrent protocol for torrent files (metadata).</p>

<p>Bencode supports four types of values:</p>

<ul>
<li>Integers</li>
<li>(Byte) Strings</li>
<li>Lists</li>
<li>Dictionaries (Hash Maps)</li>
</ul>


<p>Integers are encoded as <code>i&lt;integer encoded in base 10 ASCII&gt;e</code>. Integers can be negative, but 0 cannot be -0.</p>

<p>ByteStrings are encoded as <code>&lt;length&gt;:&lt;contents&gt;</code>. So &ldquo;foo&rdquo; would be encoded as 3:foo. The length of the content can be 0, but cannot be negative.</p>

<p>Lists are encoded as <code>l&lt;contents&gt;e</code>. Contents are bencoded elements of the list (in order), and are concatenated. Something like &ldquo;cat31&rdquo; would be encoded as l3:cati31ee.</p>

<p>Dictionaries are encoded as <code>d&lt;contents&gt;e</code>. The keys must be bytestrings, and the dictionary is ordered lexiographically by key. The encoded key value pair follow each other immediately. {&ldquo;cat&rdquo;: &ldquo;meow&rdquo;, &ldquo;dog&rdquo;: 44} would be encoded as d3:cat4:meow3:dogi44ee.</p>

<p>After reading this, I used the <a href="http://www.haskell.org/haskellwiki/Parsec">Parsec</a> library and wrote a parser for bencoded values in Haskell. I tested it on a torrent for Ubuntu and got back this:</p>

<p><img src="/images/torrent.png" alt="&quot;Metadata&quot;" /></p>

<p>We can see things like:</p>

<ul>
<li>&ldquo;announce&rdquo;: &ldquo;<a href="http://torrent.ubuntu.com:6969/announce">http://torrent.ubuntu.com:6969/announce</a>&rdquo;</li>
<li>&ldquo;announce-list&rdquo;: &ldquo;<a href="http://torrent.ubuntu.com:6969/announce">http://torrent.ubuntu.com:6969/announce</a>&rdquo;, &ldquo;<a href="http://ipv6.torrent.ubuntu.com:6969/announce">http://ipv6.torrent.ubuntu.com:6969/announce</a>&rdquo;</li>
<li>&ldquo;comment&rdquo;: &ldquo;Ubuntu CD releases.ubuntu.com&rdquo;</li>
<li>&ldquo;creation date&rdquo;: 1391706680</li>
</ul>


<p>and so on.</p>

<p>The crazy wall of text is mostly due to all of the pieces for this particular torrent.</p>

<p>After this, to get a better sense of networking in Haskell, I read up on TCP/IP and started working towards this <a href="http://www.haskell.org/haskellwiki/Implement_a_chat_server">tutorial</a> on building a multi-threaded chat server in Haskell, and getting a feel for the Network.Socket library.</p>

<p>At the very basic level: Socket &ndash;> Bind &ndash;> Listen &ndash;> Accept.</p>

<p>My networking journey will continue today&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 13]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/27/hacker-school-day-13/"/>
    <updated>2014-06-27T16:33:32-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/27/hacker-school-day-13</id>
    <content type="html"><![CDATA[<p>Day 13 of Hacker School went by pretty quickly, mostly due to some of us playing hooky to go watch the Germany vs. USA game. We were initially going to go to a German bar, but it turns out there were a lot of Germans there already (I guess they like their futbol). We ended up back tracking and found a bar called Sweet &amp; Vicious, which was sweet (their jargaritas are great), but not particularly vicious. The game was slow paced, and the atmosphere of the bar made it a nice spot to lounge.</p>

<p><img src="/images/jargarita.png" alt="dat jargarita" /></p>

<p>I guess my main reason for leaving in the middle of the day was that I was in a weird headspace after the goal making workshop. I started to doubt my decisions about the things I wanted to do this summer and that was bumming me out. On top of that, I couldn&rsquo;t install <a href="http://www.haskell.org/haskellwiki/ThreadScope">threadscope</a> to save my life, and spent almost five hours trying to get that to run (yay yak-shaving) before just giving up and deciding to read <a href="http://chimera.labs.oreilly.com/books/1230000000929">Simon Marlow&rsquo;s book</a> without it.</p>

<p>I did have a productive talk with Allison yesterday. My worries were that I was working on Haskell, a language that is rather impractical for the purpose of jobs and I wasn&rsquo;t sure if I should switch to Python or not. Which turns out it was a rather silly fear to have since I am going back to school and won&rsquo;t ostensibly be looking for a new job for at least two more years. So I have decided to stick with Haskell, and will work on some side projects in Python once in a while when the mood strikes me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Days 11 &amp; 12]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/25/hacker-school-days-11-and-12/"/>
    <updated>2014-06-25T20:36:12-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/25/hacker-school-days-11-and-12</id>
    <content type="html"><![CDATA[<p>I&rsquo;m getting behind on my blogging, meep.</p>

<p>Day 11 recap:</p>

<ul>
<li>Spent half of the day trying to debug my sudoku solver&rsquo;s board parser, which was pretty difficult as everything type checked, but I was getting the wrong output.</li>
<li>Learned about the <a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci-debugger.html">GHCI interactive debugger</a>, which let me place break points and inspect variables where the execution of the program has stopped.</li>
<li>Alan gave me a quick overview of &ldquo;equational debugging&rdquo;, which is to test little snippets of your program and make sure that it is returning the right output.</li>
<li>I ended up pulling out more complicated bits of my code into smaller functions to make equational debugging more manageable.</li>
<li>Spent the rest of the day finishing up the sudoku solver. I debugged the constraint propagation aspect of the program, and then implemented the depth first search function which utilized the constraint propagation logic.</li>
</ul>


<p>Day 12 (today!), I decided to take (another) break from Haskell. I played around for most of the day with Paper.js, trying to make something beautiful, but eventually found that it didn&rsquo;t actually interest me too much. Around 3:00 pm, Stacy from Winter 2013 batch came by Hacker School to do a goal making workshop. It did really get me thinking about my time at Hacker School, and how I need to figure out when I can say that I have achieved my goal of being literate in Haskell. I think I will spend maybe a couple more weeks max on Haskell, and then switch over to Python. My main fear is that while Haskell is awesome, it isn&rsquo;t exactly a language that I will be able to work in once I become a professional software engineer.</p>

<p>After hitting a dead end with Paper.js, I decided to pivot and play around with Python. I implemented a simple echo server in Python, where the client will send back what the server sent to it. Then I got the idea to work on a GIF bot for Zulip because sometimes emoji just aren&rsquo;t enough :). You can ask gif bot &ldquo;gif me cats&rdquo; and an API query is sent to <a href="http://giphy.com/">Giphy</a>, and gif bot returns a gif that has been tagged with cats, in this example. It&rsquo;s basically done at this point, and works locally, but I&rsquo;m not sure what the protocol is for having a permanent presence from the bot. Do I serve it on AWS/Heroku? I think I will ask Allison tomorrow. I&rsquo;m also curious if I should demo this tomorrow afternoon.</p>

<p>Here is gif bot in action:</p>

<p><img src="/images/gifbot.png" alt="&quot;Gif Bot in action&quot;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Days 9 &amp; 10]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/24/hacker-school-days-9-and-10/"/>
    <updated>2014-06-24T09:58:30-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/24/hacker-school-days-9-and-10</id>
    <content type="html"><![CDATA[<p>I didn&rsquo;t get a chance to blog about last Friday (Day 9) so I&rsquo;ll do a quick recap:</p>

<ul>
<li>First day of interview prep.</li>
<li>Worked on <a href="https://hackpad.com/Manage-those-phone-books-wK1MycZ5ATb">Manage those Phonebooks</a> in Python.</li>
<li>Turns out I had a lot of trouble parsing command line inputs, so I spent a good chunk of time on that before I decided to come back to it at the end.</li>
<li>This exercise made me feel a bit uncomfortable about how well I know a language. I&rsquo;ve been spending all of my time on Haskell and haven&rsquo;t touched Java or Python in a while.</li>
<li>Continued reading about Monads.</li>
</ul>


<p>Yesterday (Day 10), we received new check-in groups. It seems that they rotate every two weeks, and I&rsquo;m enjoying that as it gives me the chance to interact with more of my fellow Hacker Schoolers in a smaller setting.</p>

<p>I spent a good chunk of the morning finishing up the last assignment from Brent Yorgey&rsquo;s Haskell course programming a Risk, the <a href="https://en.wikipedia.org/wiki/Risk_(game)" target="_blank">boardgame</a>, simulator. It was cool to play around with Random generators to simulate die rolls, and also to simulate 1000 invasions (repeated calls to battle until there are no defenders remaining, or fewer than two attackers left) of varying defending and attacking army sizes. This was encompassed in a Battlefield data type, where Battlefield is defined as:</p>

<p>```haskell
type Army = Int</p>

<p>data Battlefield = Battlefield</p>

<pre><code>               { attackers :: Army, defenders :: Army }
</code></pre>

<p>```</p>

<p>After this, I ended up stumbling on Peter Norvig&rsquo;s Sudoku solver <a href="http://norvig.com/sudoku.html">paper</a> and decided to implement it in Haskell. I&rsquo;ve been struggling through lots of type errors but I was surprised and happy to find that I got so engrossed in my task that I stayed at Hacker School for almost 12 hours yesterday. It&rsquo;s really neat to be this absorbed in something, and feeling myself gain more confidence through being challenged by my own curiosities. Once I finish this up, I will definitely be needing some code review.</p>
]]></content>
  </entry>
  
</feed>
