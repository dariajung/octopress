<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hacker School | Yet Another Blog]]></title>
  <link href="http://blog.dariajung.com/blog/categories/hacker-school/atom.xml" rel="self"/>
  <link href="http://blog.dariajung.com/"/>
  <updated>2014-08-21T00:56:36-04:00</updated>
  <id>http://blog.dariajung.com/</id>
  <author>
    <name><![CDATA[Daria Jung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sipping on Elixir]]></title>
    <link href="http://blog.dariajung.com/blog/2014/08/21/sipping-on-elixir/"/>
    <updated>2014-08-21T00:57:53-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/08/21/sipping-on-elixir</id>
    <content type="html"><![CDATA[<p>```</p>

<hr />

<p>&lt; holy cow ></p>

<hr />

<pre><code>    \   ^__^
     \  (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
</code></pre>

<p>```</p>

<p>It&rsquo;s almost the end of my batch at Hacker School, but it&rsquo;s okay because I&rsquo;m never [ever] graduating. &#10084;</p>

<hr/>


<p>This past week <a href="https://www.hackerschool.com/residents#Jos%C3%A9-Valim">José Valim</a> has been in residence at Hacker School! José is the creator of the Elixir programming language, which is built on top of the Erlang Virtual Machine. (Joe Armstrong has said that Elixir &ldquo;is good shit.&rdquo; <a href="http://joearms.github.io/2013/05/31/a-week-with-elixir.html">Seriously!</a>). José is also a core contributor to Rails. So. Rad.</p>

<p>On Monday night, José gave us a quick introduction to Elixir and explained that Elixir is a functional, concurrent, but most importantly, a distributed language. He gave us a bit of background on Erlang and its origins as a language used for telecommunication. Erlang provides support for fault tolerent, non-stop, real-time applications. Also, hot swapping is pretty cool (which José did a demo of in Elixir). For these reasons (and many more), Erlang is the language used in messaging systems like Facebook messenger and WhatsApp.</p>

<p>I&rsquo;ve been spending the past few days working through <a href="http://chimera.labs.oreilly.com/books/1234000001642">Etudes for Elixir</a> in order to get a quick introduction to the language, and get myself up and running.</p>

<p>Some quick first impressions/takeaways:</p>

<p>Elixir is compatible with Erlang code, but it has a nice Ruby-like syntax. It&rsquo;s kinda like the love child of Ruby and Erlang.
Elixir has all the goodies like pattern matching, list comprehensions, anonymous functions that I heart from Haskell. There aren&rsquo;t quite type signatures; instead, there are these things called <a href="http://elixir-lang.org/docs/stable/elixir/Kernel.Typespec.html">specs</a>. Specs are mostly used for documenting code, but on some occasion, people use tools like <a href="http://www.erlang.org/doc/man/dialyzer.html">Dialyzer</a> to find type errors (I will probably check this out at some point).</p>

<p>One thing I find super cool about <code>iex</code>, the Elixir repl, is the <code>h</code> command to read documentation.</p>

<p><img src="/images/iex.png" alt="" /></p>

<p>Also, Elixir has SUPERB documentation. I&rsquo;ve been very pleased with how well explainations are written out, and that there are examples! Examples!</p>

<p>I&rsquo;m making my way through most of the topics in Elixir&rsquo;s <a href="http://elixir-lang.org/getting_started/1.html">getting started</a> section through études (currently getting acquainted processes), and I&rsquo;m excited to learn about Mix and OTP next. In general, I&rsquo;m excited to get deeper into Elixir since I don&rsquo;t know much about concurrent and distributed programming.</p>

<p>Today, José did a seminar on how Iterators are implemented in Elixir, going over eager map, eager filter, the idea of inlining and so on before introducing us to the idea of lazy map, etc. It was a very informative session and I will write about that more in a different blog post.</p>

<p>And just throwing this out there: HOW COOL IS IT TO BE ABLE TO ASK QUESTIONS IN PERSON TO THE CREATOR OF THE LANGUAGE YOU&rsquo;RE LEARNING? Thanks a ton to Hacker School for this amazing opportunity.</p>

<p>So far, learning Elixir has been quite nice, and the transition from Haskell to Elixir has been pretty smooth.</p>

<p>Looking forward to all of the things I learn before the end of my batch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whiteboarding to Unconfuse Myself]]></title>
    <link href="http://blog.dariajung.com/blog/2014/08/15/whiteboarding/"/>
    <updated>2014-08-15T14:38:04-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/08/15/whiteboarding</id>
    <content type="html"><![CDATA[<p>A few days ago, I stumbled on a <a href="https://github.com/jwiegley/category-theory">repository</a> on GitHub that was exploring category theory through the use of Coq, formalizing Edware Kmett&rsquo;s Hask library. Curious, I wondered what Hask was and read the description: &ldquo;Category theory for Haskell with a lens flavor&rdquo;.</p>

<p>But&hellip; what are lenses?</p>

<p>I remembered that I had bookmarked a <a href="http://blog.jakubarnold.cz/2014/07/14/lens-tutorial-introduction-part-1.html">blog post</a> that Steve Klabnik tweeted a while ago because it was related to Haskell. And now it was relevant to my interests.</p>

<p>Lenses are, at a high level, something like &ldquo;getters&rdquo; and &ldquo;setters&rdquo; that are used in imperative programming languages. It&rsquo;s not uncommon to see something like <code>book.author.name</code>. Lenses provide an abstraction like this for Haskell.</p>

<p>I spent a long time staring at the explanations in this blog post, and after pairing with Alan a bit on a simple Lens implementation, felt blown away by the weirdness and how elegant of an idea this was.</p>

<p>A realization that I had about working with Alan (after ten weeks&hellip;) is that he is the type of person to think things out by writing on a white board. Up until this point, I had never really thought about whiteboarding as a way of getting my thoughts out so that I could actually <em>look</em> at them. And the act of writing type signatures out instead of staring at them on a screen made a lot of difference for me. (I do write on scratch paper, but I generally do so very disorganizedly).</p>

<p>After Thursday demo presentations, I spent about thirty minutes whiteboarding out my thought process for the implementations of <code>over</code> and <code>set</code>:</p>

<p><img src="/images/wb2.JPG" alt="whiteboarding 1" /></p>

<p><img src="/images/wb1.JPG" alt="whiteboarding 1" /></p>

<p>I guess moral of the story for me is that I should whiteboard more to figure out what I&rsquo;m doing when I&rsquo;m confused before jumping straight to code. A very simple epiphany, but a very helpful one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Cat Cam]]></title>
    <link href="http://blog.dariajung.com/blog/2014/08/12/building-a-cat-cam/"/>
    <updated>2014-08-12T17:09:18-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/08/12/building-a-cat-cam</id>
    <content type="html"><![CDATA[<p>I recently purchased my first Raspberry Pi (the Model B+ whooho!)</p>

<p><img src="/images/pi.jpg" alt="&quot;PI&quot;" /></p>

<p>I decided that my first RaspPi project would be to build a Cat Cam to monitor Kitkat while I am away from the apartment. Occasionally he&rsquo;s being doing a few weird things like pooping outside of his litter box while I&rsquo;m not home. Basically, this is me spying on my cat.</p>

<p>After a couple of component orders (PS3Eye webcam, MicroSD card) arrived, I was ready to start setting up my new Pi.</p>

<p>Dana lent me her serial cable so I could access the Pi without an external display. However, this meant that NOOBS wouldn&rsquo;t work (it seems to require an external display), and we had to mount Raspbian Wheezy onto the SD card. There are always bumps along the way to setting up new hardware&hellip; Soon after this though, I was able to SSH into the Pi, which was great!</p>

<p>But more complications followed&hellip; RaspPi is developed in the UK, so the locale was set to en-GB.UTF8. I had some problems figuring out how to get it to be en-US.UTF8 and was going crazy trying to figure it out, because I SWEAR I was selecting install new locales when I tried to generate and update them. (Lol, no I wasn&rsquo;t). Luckily, <a href="https://www.hackerschool.com/residents#Paul-Tagliamonte">Paul</a> was able to help me troubleshoot and not pull my hair out.</p>

<p>Then, I was ready to set up the PS3Eye camera and motion detection snapshots using the motion package and following along with this <a href="http://chris.gg/2012/07/using-a-ps3-eyetoy-with-the-raspberry-pi/">tutorial</a>. The set up with the camera was incredibly straightforward, and things just worked! I was able to view the stream from within the local network of the Pi. But as it turned out, <em>only</em> the local network. When I excitely told Matt to view the stream (after I had pushed a simple Python-Flask app to Heroku), he told me that the stream was empty.</p>

<p>Slightly deflated, I started looking around RaspPi forums and found out that my problem was because the RaspPis, as a default, only allow connections from a local network due to security reasons. Basically all of the suggestions pointed to enabling port forwarding, which seemed like a super insecure move, even for someone who has barely any knowledge of security practices. Basically, I would have to open up the Pi to the outside world so the stream could be viewable on the Internet. This meant that anyone could try to SSH into it; even if it has no sensitive information on it, I still don&rsquo;t want people in my Pi :/.</p>

<p>(I took a break at this point to create a script that emailed my personal email account the IP address of the RaspPi every time it was booted to make it easy to SSH into it. Whoo!)</p>

<p>I wanted to avoid port forwarding if I could. I thought about it a bit, and last night, I remembered the awesome AWESOMENESS that is <a href="https://ngrok.com/">ngrok</a>. Ngrok creates a tunnel between localhost and the Internet. This totally solved my problem! So this morning, I played around with ngrok on the Pi, creating a tunnel that would allow the webcam feed to be viewable from the Internet, and used that in the Flask app feed source. To double check that this worked, I asked Matt to view it from Minnesota (he&rsquo;s on vacay visiting family). AND VICTORY, IT WORKS!</p>

<p>My next steps are to create a start script that runs the motion daemon, and a script to auto start ngrok. I have created a cronjob to delete the contents of a tmp file that takes a picture everytime the webcam detects motion (this can mean A LOT of pictures depending on where it is placed). At midnight every night, the script just deletes the day&rsquo;s worth of pictures, assuming that I will be able to look through them for any suspicious Kitkat behavior before the day is up.</p>

<p>I&rsquo;m really excited to set this up at home and spy on my cat >:D Next, I want to build a toy component so I can play with Kitkat remotely.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re-learning Math With Coq]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/31/re-learning-math-with-coq/"/>
    <updated>2014-07-31T10:25:40-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/31/re-learning-math-with-coq</id>
    <content type="html"><![CDATA[<p>The last time I was doing a lot of inductive proofs was during my third year of high school. I did a few in my Discrete Mathematics class, but to be quite honest, I hardly remember anything from that it (I should really revisit the material at some point&hellip;).</p>

<p>Considering that it has been more than four years &mdash;I took a gap year between my second and third year of university, I am now going into third year&mdash; I was a bit unsure of my math chops. But working through <a href="http://www.cis.upenn.edu/~bcpierce/sf/current/index.html">Software Foundations</a> has been an absolute blast. And it&rsquo;s been so cool to see the <a href="http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence">Curry-Howard correspondence</a> in action through writing proofs in Coq.</p>

<p>Rntz gave a great presentation on <a href="https://github.com/rntz/curry-howard-slides/raw/master/pres.pdf">Curry-Howard</a>, presenting formal logic, a lambda-calculus, and then showing the connection between formal logic proofs and typed expressions/programs.</p>

<p>So far, I&rsquo;ve been spending time proving some mathematical axioms such as the additive identity, multiplicative communtativity, right distributive property of multiplication over addition of numbers, and so on.</p>

<p>Coq has various proof tactics, <code>intros</code>, <code>destruct</code>, and <code>induction</code>, to name a few.</p>

<p>To show you the kind of stuff I&rsquo;ve been doing, let&rsquo;s work through an example.</p>

<p>Let&rsquo;s prove that <code>n + 0 = 0</code>.</p>

<p>First we define the theorem (adding a 0 to the right side of a natural number gives us the original natural number):</p>

<p><code>coq
Theorem plus_0_r : forall n:nat, n + 0 = n.
</code></p>

<p>So how do we prove this?</p>

<p>Well, first we need to introduce n into the scope of the proof.</p>

<p>```coq
Proof.</p>

<pre><code>intros.
</code></pre>

<p>```</p>

<p>Coq shows us that we can now work with n, and that our subgoal is to prove that n + 0 = n.</p>

<p>```coq
1 subgoals, subgoal 1 (ID 88)</p>

<h1>n : nat</h1>

<p>n + 0 = n
```</p>

<p>Cool. And now we can induct on n. In induction, you must prove the base case of <code>n = 0</code>, and for <code>n = S n'</code>; <code>S n'</code> can be read as the <em>successor</em> of n', which is equivalent to n.</p>

<p>So now, we use the <code>induction</code> tactic in Coq:</p>

<p>```coq
Proof.</p>

<pre><code>intros. induction n as [| n'].
</code></pre>

<p>```</p>

<p>Now we have two subgoals to prove, the base case and the successor case:</p>

<p>```coq
2 subgoals, subgoal 1 (ID 91)</p>

<p>============================
0 + 0 = 0</p>

<p>subgoal 2 (ID 94) is:
S n' + 0 = S n'
```</p>

<p>For my own benefit, I like to write out what case I am proving, which in this case is for when <code>n = 0</code>.
As we see, Coq gives us <code>0 + 0 = 0</code>. We can simplify this expression by writing <code>simpl</code>, and Coq will reduce this to <code>0 = 0</code>. And we know <code>0 = 0</code>. It&rsquo;s a fact. We can simply write <code>reflexivity</code> to finish proving this subgoal.</p>

<p>As a sidenote, reflexivity will simplify for you, so it wasn&rsquo;t necessary to do the <code>simpl</code> step. However, I found it helps my thought process to write out all of the steps.</p>

<p>```coq
Proof.</p>

<pre><code>intros. induction n as [| n'].
Case "n = 0". simpl. reflexivity.
</code></pre>

<p>```</p>

<p>Coq now tells us we have one subgoal remaining:</p>

<p>```coq
1 subgoals, subgoal 1 (ID 94)</p>

<p>n' : nat</p>

<h1>IHn' : n' + 0 = n'</h1>

<p>S n' + 0 = S n'
```</p>

<p>As you can see, we are given <code>IHn'</code>, an induction hypothesis to work with. So let&rsquo;s prove our second subgoal for case &ldquo;n = S n'&rdquo;:</p>

<p>We can simplify this down to <code>S (n' + 0) = S n</code> by using the <code>simpl</code> tactic. Adding a 0 to n', and then calling a successor on it is no different from adding 0 to the successor of n'.</p>

<p>```coq
1 subgoals, subgoal 1 (ID 101)</p>

<p>Case := &ldquo;n = S n'&rdquo; : String.string
n' : nat</p>

<h1>IHn' : n' + 0 = n'</h1>

<p>S (n' + 0) = S n'
```</p>

<p>But what&rsquo;s this? We have an induction hypothesis that tells us that <code>n' + 0 = n'</code>. Oh, this looks familiar. So let&rsquo;s rewrite <code>S (n' + 0)</code> using our induction hypothesis:</p>

<p>```coq
Proof.</p>

<pre><code>intros. induction n as [| n'].
Case "n = 0". simpl. reflexivity.
Case "n = S n'". simpl.  rewrite -&gt; IHn'.
</code></pre>

<p>```</p>

<p>```coq
1 subgoals, subgoal 1 (ID 102)</p>

<p>Case := &ldquo;n = S n'&rdquo; : String.string
n' : nat</p>

<h1>IHn' : n' + 0 = n'</h1>

<p>S n' = S n'
```</p>

<p>Omg, the left and the right are equivalent. And now we can say, this is true by reflexivity, and end our proof by writing <code>Qed.</code></p>

<p>Our full proof:</p>

<p>```coq
Proof.</p>

<pre><code>intros. induction n as [| n'].
Case "n = 0". simpl. reflexivity.
Case "n = S n'". simpl.  rewrite -&gt; IHn'. reflexivity.
</code></pre>

<p>Qed.
```</p>

<p>HOW COOL IS THAT???</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Type Theory]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/28/exploring-type-theory/"/>
    <updated>2014-07-28T22:19:39-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/28/exploring-type-theory</id>
    <content type="html"><![CDATA[<p>I started off today with a specific goal in mind. By the end of the day, I was pretty off my mark.</p>

<p>My original intent was to work through a tutorial, <a href="http://www.grabmueller.de/martin/www/pub/AlgorithmW.pdf">Algorithm W Step by Step</a>, for implementing the classic Algorithm W (proposed by Robin Milner) for type inference in Haskell. I was stoked to finally take a closer look at Hindley-Milner and foolishly thought I would spend a few days on it.</p>

<p>In reality, I had started my descent down the rabbit hole. I found myself reading, and while I felt comfortable with the actual Haskell code itself, the reasons for why the tutorial was implementing things by using sets, or talking about free type variables and type schemes made me feel that yeah, maybe(?) I could infer something from my understanding of Haskell, but I was still lacking appropriate knowledge for this literature.</p>

<p>So, I asked this silly question on Zulip:</p>

<blockquote><p><strong>Stream Subject</strong>: Category Theory/Type Theory/Set Theory</p>

<p><strong>Message</strong>: Hi hi. I&rsquo;m delving into Hindley-Milner for type inference and I&rsquo;m finding lots of terminology that I don&rsquo;t understand. Are there any friendly introductions to all of the theories? AM I WAY IN OVER MY HEAD?</p></blockquote>

<p><a href="http://www.rntz.net/">Rntz</a> pointed me to <a href="http://www.cis.upenn.edu/~bcpierce/tapl/">Types and Programming Languages</a> as a resource and I was intrigued. I started reading it, and of course my attention started to wane because textbooks. After some googling, and remembering back to my first week at Hacker School, I was reminded of a UPenn grad course called <a href="http://www.cis.upenn.edu/~bcpierce/sf/current/index.html">Software Foundations</a>. The course uses TAPL but also utilizes an interactive book of Coq proofs as its main text. Interactive? Sign me up.</p>

<p>Two ways to run Coq are through the CoqIDE or through Proof General Coq mode in Emacs. I found to my chagrin that CoqIDE was ugly and slow and in general, not something that I wanted to use. But that meant that I had to learn&hellip; Emacs. So for about two hours, I went through the Emacs tutorial and fiddled with my .emacs file, thinking about the time I saw Richard Stallman dressed as a saint from the Church of Emacs and resigned myself to learning a new text editor/operating system/whatever (plz don&rsquo;t hurt me, I&rsquo;m new to emacs).</p>

<p>After this, I couldn&rsquo;t figure out how to run Coq through Proof General, and time passed while I grew increasingly frustrated. Then Alan to the rescue! He helped me figure out that emacs wasn&rsquo;t correctly loading my path, and once that was fixed, I was able to write Coq and do cute stuff like:</p>

<p><code>coq
Proof. reflexivity. Qed.
</code></p>

<p>Yay!</p>

<p>Tomorrow I will continue working through Software Foundations. Aki, an alum, has also kindly pointed me to some resources for implementing type inference algorithms which I plan to hit up once I have gotten a feel for the theory behind it. Excited to see where this leads.</p>

<p>Oh, and I remapped <code>Caps Lock</code> from <code>ESC</code> to <code>CTRL</code>. So, uh, yeah.</p>
]]></content>
  </entry>
  
</feed>
