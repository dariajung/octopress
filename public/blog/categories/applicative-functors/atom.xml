<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Applicative Functors | Yet Another Blog]]></title>
  <link href="http://blog.dariajung.com/blog/categories/applicative-functors/atom.xml" rel="self"/>
  <link href="http://blog.dariajung.com/"/>
  <updated>2014-08-12T17:41:45-04:00</updated>
  <id>http://blog.dariajung.com/</id>
  <author>
    <name><![CDATA[Daria Jung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 7]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/18/hacker-school-day-7/"/>
    <updated>2014-06-18T16:22:18-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/18/hacker-school-day-7</id>
    <content type="html"><![CDATA[<p>I can&rsquo;t believe it has already been a week and a half at Hacker School. Wow. 12 weeks seems like a lot but the time is already flying by.</p>

<p>Today, I decided to resume my studies in Haskell. I worked on the week 11 assignment for Brent Yorgey&rsquo;s Haskell course. I continued working with the <code>Parser</code> data type, implementing some utilies and several new Parsers.</p>

<p>This is where I was introduced to <code>*&gt;</code> and <code>&lt;*</code> and the concept of lifting in functional programming (which I am still having a hard time fully understanding).</p>

<p>Described in the source for module <code>Control.Applicative</code> as:</p>

<p>```haskell
&mdash; | Sequence actions, discarding the value of the first argument.</p>

<pre><code>(*&gt;) :: f a -&gt; f b -&gt; f b
(*&gt;) = liftA2 (const id)
</code></pre>

<p>```
and</p>

<p>```haskell
&mdash; | Sequence actions, discarding the value of the second argument.</p>

<pre><code>(&lt;*) :: f a -&gt; f b -&gt; f a
(&lt;*) = liftA2 const
</code></pre>

<p>```</p>

<p>Using some examples I worked out by hand:</p>

<p><code>haskell
ghci&gt; runParser (spaces *&gt; posInt) " 345"
</code></p>

<p>I understood this computation as first:</p>

<p><code>haskell
ghci&gt; runParser spaces " 345"
Just (" ", "345")
</code>
The <code>" "</code>, the result, is disregarded. We pass on &ldquo;345&rdquo; to the next call:</p>

<p><code>haskell
ghci&gt; runParser posInt "345"
Just (345, "")
</code></p>

<p>Since we are ignoring the result of <code>runParser spaces " 345"</code>, the final result is:</p>

<p><code>haskell
Just (345, "")
</code></p>

<p>Using the same inputs, but for <code>&lt;*</code> this time:</p>

<p><code>haskell
ghci&gt; runParser (spaces &lt;* posInt) " 345"
</code></p>

<p>First we run:</p>

<p><code>haskell
ghci&gt; runParser spaces " 345"
Just (" ", "345")
</code></p>

<p>This time, we <em>don&rsquo;t</em> disregard <code>" "</code>.</p>

<p>We pass on &ldquo;345&rdquo;:</p>

<p><code>haskell
ghci&gt; runParser posInt "345"
Just (345, "")
</code></p>

<p>Here we are ignoring <code>345</code>, the result of <code>runParser posInt "345"</code>.</p>

<p>The final result ends up being:</p>

<p><code>haskell
Just (" ", "")
</code>
Cool, how about one more.</p>

<p><code>haskell
ghci&gt; runParser (ident &lt;* posInt) "hello 345"
</code></p>

<p><code>haskell
ghci&gt; runParser ident "hello 345"
Just ("hello", " 345")
</code></p>

<p>We keep <code>"hello"</code> and pass on <code>" 345"</code>.</p>

<p><code>haskell
ghci&gt; runParser posInt " 345"
Nothing
</code></p>

<p>Uh oh. We got <code>Nothing</code>. There is no state for us to use in the return <code>Maybe</code> tuple, so we end up with <code>Nothing</code>.</p>

<ul>
<li><code>posInt :: Parser Integer</code> : Checks for positive integers in String input.</li>
<li><code>spaces :: Parser String</code> : Checks for spaces in String input.</li>
<li><code>ident :: Parser String</code> : an identiÔ¨Åer can be any nonempty sequence of letters and digits, except that it may not start with a digit.</li>
</ul>


<p>I got this far in my understanding of these functions, but I still do not quite understand what is being &ldquo;lifted&rdquo; behind the scenes.</p>

<p>Lifting in the case of <code>(a -&gt; b) -&gt; f a -&gt; f b</code> is defined in LYaH as &ldquo;a function that takes a function and returns a new function that&rsquo;s just like the old one, only it takes a functor as a parameter and returns a functor as the result.&rdquo; I will mull this over more tonight, and perhaps ask Alan or some alumni in Zulip tomorrow if I am still having a hard time understanding the concept.</p>

<p>For about 30 minutes, I worked through the first six problems of <a href="http://www.haskell.org/haskellwiki/99_questions">99 Haskell Problems</a>. It&rsquo;s been pretty fun to revist things I learned a while back now that I am getting wrapped up in the intricacies of Haskell. My brain feels like it is exploding all the time.</p>

<p>Learning Haskell has been challenging. It is definitely rewarding, but there are many times when I feel discouraged because I don&rsquo;t know when I will understand things like Applicative Functors like the back of my hand. I often feel afraid that I <em>won&rsquo;t</em> ever understand these things, but then I tell myself, what&rsquo;s the rush?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Applicative Functors]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/16/applicative-functors/"/>
    <updated>2014-06-16T17:02:53-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/16/applicative-functors</id>
    <content type="html"><![CDATA[<p>Today at Hacker School, I was studying functors and applicative functors in Haskell. Functors are structures that &ldquo;can be mapped over&rdquo; [1]. So, applicative functors are functors that allow functions to be applied <em>within</em> a functor. Functor-ception.</p>

<p>This concept proved to be a pretty difficult one for me to grasp today. I wrangled with it for several hours, reading and re-reading Learn You a Haskell&rsquo;s <a href="http://learnyouahaskell.com/functors-applicative-functors-and-monoids">explanation</a> for them before I broke down and asked for help on the Haskell Zuplip thread. (Now I know that I should ask for help if I can&rsquo;t figure something out in 15 minutes on my own.)</p>

<p>The particular problem I was sweating over was writing an Applicative instance for a <code>Parser</code>:</p>

<p><code>haskell
newtype Parser a = Parser { runParser :: String -&gt; Maybe (a, String) }
</code></p>

<p>I was eventually able to come up with this:</p>

<p>```haskell
instance Applicative Parser where</p>

<pre><code>pure x = Parser $ \s -&gt; Just (x, s)
p &lt;*&gt; q = Parser $ \s -&gt;
        case (runParser p s) of 
            Nothing -&gt; Nothing
            Just (f, s') -&gt; case (runParser q s') of
                Nothing -&gt; Nothing
                Just (x, s'') -&gt; Just (f x, s'')
</code></pre>

<p>```</p>

<p>Applicative instances have a <code>pure</code> method and a <code>&lt;*&gt;</code> method. <code>Pure</code> is simple enough. It has a type declaration of <code>pure :: a -&gt; f a</code>. Basically, it takes a value of any type, and returns that value wrapped in an applicative functor. Where I had trouble was implementing <code>&lt;*&gt;</code>. <code>&lt;*&gt;</code> has a type declaration of <code>f (a -&gt; b) -&gt; f a -&gt; f b</code>. Basically, it is like <code>fmap</code>, but it takes a functor with a function in it, and another functor. The function from the first functor is sort of mapped over the value in the second functor.</p>

<p>Chen, Hacker School W &lsquo;13, was a saint and guided me in grasping the intuition behind writing this applicative instance. <code>P</code> and <code>q</code> are both functors here. <code>P</code>, however, is the functor that holds a function within it. In order to apply this function to the second functor, he was able to explain to me that I needed to &ldquo;unwrap&rdquo; the each functor and pass each state on to the subsequent action. In this case, that would be to call <code>runParser</code> on the functor <code>p</code> and the first state <code>s</code>, which would return a type of <code>Maybe ((a-&gt;b), String)</code>. This is where the cases come in. The result of <code>runparser p s</code> could either be <code>Nothing</code> or <code>Just (f, s')</code>, where <code>f</code> is of type declaration <code>(a-&gt;b)</code> and <code>s'</code> is the second state. In the case of <code>Nothing</code>, we return <code>Nothing</code> because there is nothing to pass on to the second functor. On the other hand, we again run <code>runParser</code> to &ldquo;unwrap&rdquo; the second functor. Just as before, in the case of <code>Nothing</code>, we return <code>Nothing</code>. Otherwise, we get <code>Just (x, s'')</code>, where <code>x</code> is of type <code>a</code> and <code>s''</code> is the third state. With this, we can now apply <code>f</code> on <code>x</code> to go from something of type <code>a</code> to type <code>b</code>, and return the third state <code>s''</code>, resulting in <code>Just (f x, s'')</code>.</p>

<p>Whew. I definitely learned a ton doing this. I hope my explaination made sense!</p>

<p>Resources <br/>
[1] <a href="http://en.wikibooks.org/wiki/Haskell/Applicative_Functors">Haskell/Applicative Functors</a></p>
]]></content>
  </entry>
  
</feed>
