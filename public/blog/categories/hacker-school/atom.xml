<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hacker School | Yet Another Blog]]></title>
  <link href="http://blog.dariajung.com/blog/categories/hacker-school/atom.xml" rel="self"/>
  <link href="http://blog.dariajung.com/"/>
  <updated>2014-08-12T17:41:45-04:00</updated>
  <id>http://blog.dariajung.com/</id>
  <author>
    <name><![CDATA[Daria Jung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Cat Cam]]></title>
    <link href="http://blog.dariajung.com/blog/2014/08/12/building-a-cat-cam/"/>
    <updated>2014-08-12T17:09:18-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/08/12/building-a-cat-cam</id>
    <content type="html"><![CDATA[<p>I recently purchased my first Raspberry Pi (the Model B+ whooho!)</p>

<p><img src="/images/pi.jpg" alt="&quot;PI&quot;" /></p>

<p>I decided that my first RaspPi project would be to build a Cat Cam to monitor Kitkat while I am away from the apartment. Occasionally he&rsquo;s being doing a few weird things like pooping outside of his litter box while I&rsquo;m not home. Basically, this is me spying on my cat.</p>

<p>After a couple of component orders (PS3Eye webcam, MicroSD card) arrived, I was ready to start setting up my new Pi.</p>

<p>Dana lent me her serial cable so I could access the Pi without an external display. However, this meant that NOOBS wouldn&rsquo;t work (it seems to require an external display), and we had to mount Raspbian Wheezy onto the SD card. There are always bumps along the way to setting up new hardware&hellip; Soon after this though, I was able to SSH into the Pi, which was great!</p>

<p>But more complications followed&hellip; RaspPi is developed in the UK, so the locale was set to en-GB.UTF8. I had some problems figuring out how to get it to be en-US.UTF8 and was going crazy trying to figure it out, because I SWEAR I was selecting install new locales when I tried to generate and update them. (Lol, no I wasn&rsquo;t). Luckily, <a href="https://www.hackerschool.com/residents#Paul-Tagliamonte">Paul</a> was able to help me troubleshoot and not pull my hair out.</p>

<p>Then, I was ready to set up the PS3Eye camera and motion detection snapshots using the motion package and following along with this <a href="http://chris.gg/2012/07/using-a-ps3-eyetoy-with-the-raspberry-pi/">tutorial</a>. The set up with the camera was incredibly straightforward, and things just worked! I was able to view the stream from within the local network of the Pi. But as it turned out, <em>only</em> the local network. When I excitely told Matt to view the stream (after I had pushed a simple Python-Flask app to Heroku), he told me that the stream was empty.</p>

<p>Slightly deflated, I started looking around RaspPi forums and found out that my problem was because the RaspPis, as a default, only allow connections from a local network due to security reasons. Basically all of the suggestions pointed to enabling port forwarding, which seemed like a super insecure move, even for someone who has barely any knowledge of security practices. Basically, I would have to open up the Pi to the outside world so the stream could be viewable on the Internet. This meant that anyone could try to SSH into it; even if it has no sensitive information on it, I still don&rsquo;t want people in my Pi :/.</p>

<p>(I took a break at this point to create a script that emailed my personal email account the IP address of the RaspPi every time it was booted to make it easy to SSH into it. Whoo!)</p>

<p>I wanted to avoid port forwarding if I could. I thought about it a bit, and last night, I remembered the awesome AWESOMENESS that is <a href="https://ngrok.com/">ngrok</a>. Ngrok creates a tunnel between localhost and the Internet. This totally solved my problem! So this morning, I played around with ngrok on the Pi, creating a tunnel that would allow the webcam feed to be viewable from the Internet, and used that in the Flask app feed source. To double check that this worked, I asked Matt to view it from Minnesota (he&rsquo;s on vacay visiting family). AND VICTORY, IT WORKS!</p>

<p>My next steps are to create a start script that runs the motion daemon, and a script to auto start ngrok. I have created a cronjob to delete the contents of a tmp file that takes a picture everytime the webcam detects motion (this can mean A LOT of pictures depending on where it is placed). At midnight every night, the script just deletes the day&rsquo;s worth of pictures, assuming that I will be able to look through them for any suspicious Kitkat behavior before the day is up.</p>

<p>I&rsquo;m really excited to set this up at home and spy on my cat >:D Next, I want to build a toy component so I can play with Kitkat remotely.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re-learning Math With Coq]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/31/re-learning-math-with-coq/"/>
    <updated>2014-07-31T10:25:40-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/31/re-learning-math-with-coq</id>
    <content type="html"><![CDATA[<p>The last time I was doing a lot of inductive proofs was during my third year of high school. I did a few in my Discrete Mathematics class, but to be quite honest, I hardly remember anything from that it (I should really revisit the material at some point&hellip;).</p>

<p>Considering that it has been more than four years &mdash;I took a gap year between my second and third year of university, I am now going into third year&mdash; I was a bit unsure of my math chops. But working through <a href="http://www.cis.upenn.edu/~bcpierce/sf/current/index.html">Software Foundations</a> has been an absolute blast. And it&rsquo;s been so cool to see the <a href="http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence">Curry-Howard correspondence</a> in action through writing proofs in Coq.</p>

<p>Rntz gave a great presentation on <a href="https://github.com/rntz/curry-howard-slides/raw/master/pres.pdf">Curry-Howard</a>, presenting formal logic, a lambda-calculus, and then showing the connection between formal logic proofs and typed expressions/programs.</p>

<p>So far, I&rsquo;ve been spending time proving some mathematical axioms such as the additive identity, multiplicative communtativity, right distributive property of multiplication over addition of numbers, and so on.</p>

<p>Coq has various proof tactics, <code>intros</code>, <code>destruct</code>, and <code>induction</code>, to name a few.</p>

<p>To show you the kind of stuff I&rsquo;ve been doing, let&rsquo;s work through an example.</p>

<p>Let&rsquo;s prove that <code>n + 0 = 0</code>.</p>

<p>First we define the theorem (adding a 0 to the right side of a natural number gives us the original natural number):</p>

<p><code>coq
Theorem plus_0_r : forall n:nat, n + 0 = n.
</code></p>

<p>So how do we prove this?</p>

<p>Well, first we need to introduce n into the scope of the proof.</p>

<p>```coq
Proof.</p>

<pre><code>intros.
</code></pre>

<p>```</p>

<p>Coq shows us that we can now work with n, and that our subgoal is to prove that n + 0 = n.</p>

<p>```coq
1 subgoals, subgoal 1 (ID 88)</p>

<h1>n : nat</h1>

<p>n + 0 = n
```</p>

<p>Cool. And now we can induct on n. In induction, you must prove the base case of <code>n = 0</code>, and for <code>n = S n'</code>; <code>S n'</code> can be read as the <em>successor</em> of n', which is equivalent to n.</p>

<p>So now, we use the <code>induction</code> tactic in Coq:</p>

<p>```coq
Proof.</p>

<pre><code>intros. induction n as [| n'].
</code></pre>

<p>```</p>

<p>Now we have two subgoals to prove, the base case and the successor case:</p>

<p>```coq
2 subgoals, subgoal 1 (ID 91)</p>

<p>============================
0 + 0 = 0</p>

<p>subgoal 2 (ID 94) is:
S n' + 0 = S n'
```</p>

<p>For my own benefit, I like to write out what case I am proving, which in this case is for when <code>n = 0</code>.
As we see, Coq gives us <code>0 + 0 = 0</code>. We can simplify this expression by writing <code>simpl</code>, and Coq will reduce this to <code>0 = 0</code>. And we know <code>0 = 0</code>. It&rsquo;s a fact. We can simply write <code>reflexivity</code> to finish proving this subgoal.</p>

<p>As a sidenote, reflexivity will simplify for you, so it wasn&rsquo;t necessary to do the <code>simpl</code> step. However, I found it helps my thought process to write out all of the steps.</p>

<p>```coq
Proof.</p>

<pre><code>intros. induction n as [| n'].
Case "n = 0". simpl. reflexivity.
</code></pre>

<p>```</p>

<p>Coq now tells us we have one subgoal remaining:</p>

<p>```coq
1 subgoals, subgoal 1 (ID 94)</p>

<p>n' : nat</p>

<h1>IHn' : n' + 0 = n'</h1>

<p>S n' + 0 = S n'
```</p>

<p>As you can see, we are given <code>IHn'</code>, an induction hypothesis to work with. So let&rsquo;s prove our second subgoal for case &ldquo;n = S n'&rdquo;:</p>

<p>We can simplify this down to <code>S (n' + 0) = S n</code> by using the <code>simpl</code> tactic. Adding a 0 to n', and then calling a successor on it is no different from adding 0 to the successor of n'.</p>

<p>```coq
1 subgoals, subgoal 1 (ID 101)</p>

<p>Case := &ldquo;n = S n'&rdquo; : String.string
n' : nat</p>

<h1>IHn' : n' + 0 = n'</h1>

<p>S (n' + 0) = S n'
```</p>

<p>But what&rsquo;s this? We have an induction hypothesis that tells us that <code>n' + 0 = n'</code>. Oh, this looks familiar. So let&rsquo;s rewrite <code>S (n' + 0)</code> using our induction hypothesis:</p>

<p>```coq
Proof.</p>

<pre><code>intros. induction n as [| n'].
Case "n = 0". simpl. reflexivity.
Case "n = S n'". simpl.  rewrite -&gt; IHn'.
</code></pre>

<p>```</p>

<p>```coq
1 subgoals, subgoal 1 (ID 102)</p>

<p>Case := &ldquo;n = S n'&rdquo; : String.string
n' : nat</p>

<h1>IHn' : n' + 0 = n'</h1>

<p>S n' = S n'
```</p>

<p>Omg, the left and the right are equivalent. And now we can say, this is true by reflexivity, and end our proof by writing <code>Qed.</code></p>

<p>Our full proof:</p>

<p>```coq
Proof.</p>

<pre><code>intros. induction n as [| n'].
Case "n = 0". simpl. reflexivity.
Case "n = S n'". simpl.  rewrite -&gt; IHn'. reflexivity.
</code></pre>

<p>Qed.
```</p>

<p>HOW COOL IS THAT???</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Type Theory]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/28/exploring-type-theory/"/>
    <updated>2014-07-28T22:19:39-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/28/exploring-type-theory</id>
    <content type="html"><![CDATA[<p>I started off today with a specific goal in mind. By the end of the day, I was pretty off my mark.</p>

<p>My original intent was to work through a tutorial, <a href="http://www.grabmueller.de/martin/www/pub/AlgorithmW.pdf">Algorithm W Step by Step</a>, for implementing the classic Algorithm W (proposed by Robin Milner) for type inference in Haskell. I was stoked to finally take a closer look at Hindley-Milner and foolishly thought I would spend a few days on it.</p>

<p>In reality, I had started my descent down the rabbit hole. I found myself reading, and while I felt comfortable with the actual Haskell code itself, the reasons for why the tutorial was implementing things by using sets, or talking about free type variables and type schemes made me feel that yeah, maybe(?) I could infer something from my understanding of Haskell, but I was still lacking appropriate knowledge for this literature.</p>

<p>So, I asked this silly question on Zulip:</p>

<blockquote><p><strong>Stream Subject</strong>: Category Theory/Type Theory/Set Theory</p>

<p><strong>Message</strong>: Hi hi. I&rsquo;m delving into Hindley-Milner for type inference and I&rsquo;m finding lots of terminology that I don&rsquo;t understand. Are there any friendly introductions to all of the theories? AM I WAY IN OVER MY HEAD?</p></blockquote>

<p><a href="http://www.rntz.net/">Rntz</a> pointed me to <a href="http://www.cis.upenn.edu/~bcpierce/tapl/">Types and Programming Languages</a> as a resource and I was intrigued. I started reading it, and of course my attention started to wane because textbooks. After some googling, and remembering back to my first week at Hacker School, I was reminded of a UPenn grad course called <a href="http://www.cis.upenn.edu/~bcpierce/sf/current/index.html">Software Foundations</a>. The course uses TAPL but also utilizes an interactive book of Coq proofs as its main text. Interactive? Sign me up.</p>

<p>Two ways to run Coq are through the CoqIDE or through Proof General Coq mode in Emacs. I found to my chagrin that CoqIDE was ugly and slow and in general, not something that I wanted to use. But that meant that I had to learn&hellip; Emacs. So for about two hours, I went through the Emacs tutorial and fiddled with my .emacs file, thinking about the time I saw Richard Stallman dressed as a saint from the Church of Emacs and resigned myself to learning a new text editor/operating system/whatever (plz don&rsquo;t hurt me, I&rsquo;m new to emacs).</p>

<p>After this, I couldn&rsquo;t figure out how to run Coq through Proof General, and time passed while I grew increasingly frustrated. Then Alan to the rescue! He helped me figure out that emacs wasn&rsquo;t correctly loading my path, and once that was fixed, I was able to write Coq and do cute stuff like:</p>

<p><code>coq
Proof. reflexivity. Qed.
</code></p>

<p>Yay!</p>

<p>Tomorrow I will continue working through Software Foundations. Aki, an alum, has also kindly pointed me to some resources for implementing type inference algorithms which I plan to hit up once I have gotten a feel for the theory behind it. Excited to see where this leads.</p>

<p>Oh, and I remapped <code>Caps Lock</code> from <code>ESC</code> to <code>CTRL</code>. So, uh, yeah.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Working Gunzip and Soldering]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/24/a-working-gunzip-and-soldering/"/>
    <updated>2014-07-24T10:01:32-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/24/a-working-gunzip-and-soldering</id>
    <content type="html"><![CDATA[<p>Yesterday was a super productive day for me. In the morning, I was in the midst of debugging my gunzip implementation in Haskell.
I have a function <code>addItem</code> that adds a node to a HuffmanTree by writing an IORef val because I needed mutability. When I&rsquo;m creating the HuffmanTree, I need to add a whole slew of values (from a code table) into the tree, so I mapped the addItem function over the list of codes, which returned <code>[IO()]</code>. My problem here was that despite having added items to an initial empty tree, I was returning an unaltered tree. I was confused because I was sure I had allowed for mutability! But why?!</p>

<p>Luckily, Alan happened to be running an impromptu session on Monads where he covered the IO Monad, and attending that helped me figure out what my problem was, I think.</p>

<p>I&rsquo;m still not precisely sure if I&rsquo;m understanding correctly but <code>[IO()]</code> is a list of <code>IO()</code>s. And things in the IO monad won&rsquo;t evaluate until run-time. So basically I had a list of thunk-like things that wouldn&rsquo;t write until evaluated.</p>

<p>This does not work
<code>haskell
let added =  map (\(label, codes) -&gt; addItem root label codes) code_table
</code></p>

<p>but this works
<code>haskell
added &lt;- sequence $ map (\(label, codes) -&gt; addItem root label codes) (code_table)
</code></p>

<p>As an aside, <code>added</code> is actually a useless value (it&rsquo;s just a list of <code>()</code>s). I don&rsquo;t care about it. All I care about is the value of <code>root</code> because I have mutated it to add nodes to it.</p>

<p>After this, I spent some time fixing off by one errors because I was translating Julia code to Haskell and Julia is 1-indexed while Haskell is 0-index. Lol. THEN IT WORKED. HUZZAH!</p>

<p>In the afternoon into the evening, I worked with Dana, Minnie, and Sophia on soldering chips, wires, and LEDs together. It was loads of fun and will continue today, I suspect.</p>

<p><img src="https://pbs.twimg.com/media/BtRShaVIUAAQ6LR.jpg:large" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Halfway, What???]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/23/halfway/"/>
    <updated>2014-07-23T09:52:02-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/23/halfway</id>
    <content type="html"><![CDATA[<p>Wow, wow, wow. This week marked the halfway point of my time at Hacker School. It&rsquo;s been an exciting time, with the incoming of the new batch (28 new Hacker Schoolers!) and 455 Broadway is much more lively than it was before. It&rsquo;s been harder to find a place to sit, which is a good problem to have. :)</p>

<p>I haven&rsquo;t blogged since last week, so a lot has happened since then:</p>

<ul>
<li>Very proud to say that I made the <code>cats</code> stream on Zulip.</li>
<li>My implementation of gunzip is undergoing debugging, so hopefully I can have that done by the end of the week.</li>
<li>Dana taught me how to solder! I soldered wires onto a strip of NeoPixels.</li>
<li>Dana and I checked out <a href="https://hackmanhattan.com/">HackManhattan</a>, a space for hardware hackers. They were kind enough to let us go through their extra parts and we found the power sources we were looking for for the party on Friday.</li>
<li>Mel Chua, our first resident, gave us very informative talks on different learning styles and how to maximize our time at Hacker School. I do sort of wish this happend on the first week for &ldquo;seconds&rdquo; since I feel like some of us floundered at figuring out how to get used to self-directedness.</li>
<li>I missed my first Friday session to go visit my mom in North Carolina.</li>
<li>I am back to being addicted to coffee. <a href="http://www.portorico.com/store/">Porto Rico Importing Co.</a> is my vice.</li>
</ul>


<p>Here&rsquo;s to another six weeks! Well, more like 5 and a half weeks. :D:D:D:D:D:D: &lt;&mdash; Some alums taught me this happy/sad combo face.</p>
]]></content>
  </entry>
  
</feed>
