<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker School Log]]></title>
  <link href="http://blog.dariajung.com/atom.xml" rel="self"/>
  <link href="http://blog.dariajung.com/"/>
  <updated>2014-07-28T23:45:32-04:00</updated>
  <id>http://blog.dariajung.com/</id>
  <author>
    <name><![CDATA[Daria Jung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploring Type Theory]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/28/exploring-type-theory/"/>
    <updated>2014-07-28T22:19:39-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/28/exploring-type-theory</id>
    <content type="html"><![CDATA[<p>I started off today with a specific goal in mind. By the end of the day, I was pretty off my mark.</p>

<p>My original intent was to work through a tutorial, <a href="http://www.grabmueller.de/martin/www/pub/AlgorithmW.pdf">Algorithm W Step by Step</a>, for implementing the classic Algorithm W (proposed by Robin Milner) for type inference in Haskell. I was stoked to finally take a closer look at Hindley-Milner and foolishly thought I would spend a few days on it.</p>

<p>In reality, I had started my descent down the rabbit hole. I found myself reading, and while I felt comfortable with the actual Haskell code itself, the reasons for why the tutorial was implementing things by using sets, or talking about free type variables and type schemes made me feel that yeah, maybe(?) I could infer something from my understanding of Haskell, but I was still lacking appropriate knowledge for this literature.</p>

<p>So, I asked this silly question on Zulip:</p>

<blockquote><p><strong>Stream Subject</strong>: Category Theory/Type Theory/Set Theory</p>

<p><strong>Message</strong>: Hi hi. I&rsquo;m delving into Hindley-Milner for type inference and I&rsquo;m finding lots of terminology that I don&rsquo;t understand. Are there any friendly introductions to all of the theories? AM I WAY IN OVER MY HEAD?</p></blockquote>

<p><a href="http://www.rntz.net/">Rntz</a> pointed me to <a href="http://www.cis.upenn.edu/~bcpierce/tapl/">Types and Programming Languages</a> as a resource and I was intrigued. I started reading it, and of course my attention started to wane because textbooks. After some googling, and remembering back to my first week at Hacker School, I was reminded of a UPenn grad course called <a href="http://www.cis.upenn.edu/~bcpierce/sf/current/index.html">Software Foundations</a>. The course uses TAPL but also utilizes an interactive book of Coq proofs as its main text. Interactive? Sign me up.</p>

<p>Two ways to run Coq are through the CoqIDE or through Proof General Coq mode in Emacs. I found to my chagrin that CoqIDE was ugly and slow and in general, not something that I wanted to use. But that meant that I had to learn&hellip; Emacs. So for about two hours, I went through the Emacs tutorial and fiddled with my .emacs file, thinking about the time I saw Richard Stallman dressed as a saint from the Church of Emacs and resigned myself to learning a new text editor/operating system/whatever (plz don&rsquo;t hurt me, I&rsquo;m new to emacs).</p>

<p>After this, I couldn&rsquo;t figure out how to run Coq through Proof General, and time passed while I grew increasingly frustrated. Then Alan to the rescue! He helped me figure out that emacs wasn&rsquo;t correctly loading my path, and once that was fixed, I was able to write Coq and do cute stuff like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="kn">Proof</span><span class="o">.</span> <span class="kp">reflexivity</span><span class="o">.</span> <span class="kn">Qed</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yay!</p>

<p>Tomorrow I will continue working through Software Foundations. Aki, an alum, has also kindly pointed me to some resources for implementing type inference algorithms which I plan to hit up once I have gotten a feel for the theory behind it. Excited to see where this leads.</p>

<p>Oh, and I remapped <code>Caps Lock</code> from <code>ESC</code> to <code>CTRL</code>. So, uh, yeah.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Working Gunzip and Soldering]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/24/a-working-gunzip-and-soldering/"/>
    <updated>2014-07-24T10:01:32-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/24/a-working-gunzip-and-soldering</id>
    <content type="html"><![CDATA[<p>Yesterday was a super productive day for me. In the morning, I was in the midst of debugging my gunzip implementation in Haskell.
I have a function <code>addItem</code> that adds a node to a HuffmanTree by writing an IORef val because I needed mutability. When I&rsquo;m creating the HuffmanTree, I need to add a whole slew of values (from a code table) into the tree, so I mapped the addItem function over the list of codes, which returned <code>[IO()]</code>. My problem here was that despite having added items to an initial empty tree, I was returning an unaltered tree. I was confused because I was sure I had allowed for mutability! But why?!</p>

<p>Luckily, Alan happened to be running an impromptu session on Monads where he covered the IO Monad, and attending that helped me figure out what my problem was, I think.</p>

<p>I&rsquo;m still not precisely sure if I&rsquo;m understanding correctly but <code>[IO()]</code> is a list of <code>IO()</code>s. And things in the IO monad won&rsquo;t evaluate until run-time. So basically I had a list of thunk-like things that wouldn&rsquo;t write until evaluated.</p>

<p>This does not work</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">added</span> <span class="ow">=</span>  <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">codes</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">addItem</span> <span class="n">root</span> <span class="n">label</span> <span class="n">codes</span><span class="p">)</span> <span class="n">code_table</span>
</span></code></pre></td></tr></table></div></figure>


<p>but this works</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">added</span> <span class="ow">&lt;-</span> <span class="n">sequence</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">codes</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">addItem</span> <span class="n">root</span> <span class="n">label</span> <span class="n">codes</span><span class="p">)</span> <span class="p">(</span><span class="n">code_table</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As an aside, <code>added</code> is actually a useless value (it&rsquo;s just a list of <code>()</code>s). I don&rsquo;t care about it. All I care about is the value of <code>root</code> because I have mutated it to add nodes to it.</p>

<p>After this, I spent some time fixing off by one errors because I was translating Julia code to Haskell and Julia is 1-indexed while Haskell is 0-index. Lol. THEN IT WORKED. HUZZAH!</p>

<p>In the afternoon into the evening, I worked with Dana, Minnie, and Sophia on soldering chips, wires, and LEDs together. It was loads of fun and will continue today, I suspect.</p>

<p><img src="https://pbs.twimg.com/media/BtRShaVIUAAQ6LR.jpg:large" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Halfway, What???]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/23/halfway/"/>
    <updated>2014-07-23T09:52:02-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/23/halfway</id>
    <content type="html"><![CDATA[<p>Wow, wow, wow. This week marked the halfway point of my time at Hacker School. It&rsquo;s been an exciting time, with the incoming of the new batch (28 new Hacker Schoolers!) and 455 Broadway is much more lively than it was before. It&rsquo;s been harder to find a place to sit, which is a good problem to have. :)</p>

<p>I haven&rsquo;t blogged since last week, so a lot has happened since then:</p>

<ul>
<li>Very proud to say that I made the <code>cats</code> stream on Zulip.</li>
<li>My implementation of gunzip is undergoing debugging, so hopefully I can have that done by the end of the week.</li>
<li>Dana taught me how to solder! I soldered wires onto a strip of NeoPixels.</li>
<li>Dana and I checked out <a href="https://hackmanhattan.com/">HackManhattan</a>, a space for hardware hackers. They were kind enough to let us go through their extra parts and we found the power sources we were looking for for the party on Friday.</li>
<li>Mel Chua, our first resident, gave us very informative talks on different learning styles and how to maximize our time at Hacker School. I do sort of wish this happend on the first week for &ldquo;seconds&rdquo; since I feel like some of us floundered at figuring out how to get used to self-directedness.</li>
<li>I missed my first Friday session to go visit my mom in North Carolina.</li>
<li>I am back to being addicted to coffee. <a href="http://www.portorico.com/store/">Porto Rico Importing Co.</a> is my vice.</li>
</ul>


<p>Here&rsquo;s to another six weeks! Well, more like 5 and a half weeks. :D:D:D:D:D:D: &lt;&mdash; Some alums taught me this happy/sad combo face.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OCaml! Haskell! Gunzip!]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/15/gunzip/"/>
    <updated>2014-07-15T18:57:22-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/15/gunzip</id>
    <content type="html"><![CDATA[<p>For a couple of days, I told myself that I would study OCaml now that I have a decent grasp of Haskell. But it&rsquo;s actually been pretty
difficult to leave Haskell because I am rather enamoured with the language. &#10084;</p>

<p>I did however, manage to read through a good chunk of <a href="http://ocaml-book.com/">OCaml from the Very Beginning</a>, and work through the exercises that accompany each chapter. I found it to be a very solid introductory text, as the author makes no assumptions about the reader&rsquo;s background. I plan to finish it up at some point, and move on to <em>Real World OCaml</em>.</p>

<p>A couple of things that jumped out at me as I started learning OCaml:</p>

<ul>
<li>The standard library is pretty sparse. Will be checking out Jane Street&rsquo;s Core.</li>
<li>There are mutable data structures.</li>
<li>OCaml supports imperative and functional styles.</li>
<li>The introductory text, at least <em>OCaml from the Very Beginning</em>, emphasized understanding tail recursion (which I didn&rsquo;t really think about when learning Haskell, but maybe I did it wrong)</li>
<li>Utop is pretty cool.</li>
<li>I got confused by <code>=</code> and <code>==</code> because I wanted to use <code>==</code> but that seems to be reserved for people who really know what they&rsquo;re doing.</li>
</ul>


<p>For the past few days, I have been exploring file compression and decompression. I needed a new project and starting looking at what previous HSers had done, and I found this <a href="http://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/">blog post</a> by alumna <a href="https://twitter.com/b0rk">Julia Evans</a> on implementing gunzip in Julia. So I&rsquo;ve decided to implement it in Haskell! :D :D :D</p>

<p>I&rsquo;ve been reading up on the <a href="http://www.gzip.org/algorithm.txt">algorithm specifications</a> for inflating and deflating and the <a href="http://www.gzip.org/format.txt">format</a> information. I tried looking at the source in C but my head started to hurt, so I have been studying Julia&rsquo;s <a href="https://github.com/jvns/gzip.jl/blob/master/gzip.jl">implementation</a>, which despite me never having seen Julia code before, has been very helpful.</p>

<p>I spent today working on parsing a gzipped file&rsquo;s header and metadata information. Tomorrow I will read up more on the algorithm description and dive into implementing inflate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion Friday]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/12/recursion-friday/"/>
    <updated>2014-07-12T12:38:25-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/12/recursion-friday</id>
    <content type="html"><![CDATA[<p>Yesterday at Hacker School was Recursion Friday. Basically, a group of HSers sat down and worked on various recursive problems and brain teasers in the languages of our choice.</p>

<p>Recursion used to make me go like this:</p>

<p><img src="http://media.giphy.com/media/NoglyWTK9tCMw/giphy.gif" alt="Scared" /></p>

<p>But somewhere along the way as I was learning Haskell, recursion started to click with my previously recursion-addled brain.</p>

<p>One of the questions yesterday was to find all of the permutations of a string. After some white boarding with Denise and Georgi, talking it through with Alan and Tom, we basically came to the conclusion that the algorithm should be something like this (in pseudocode):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Permute("abcd") =
</span><span class='line'>    "a" + Permute("bcd") 
</span><span class='line'>    &lt;list concatenation&gt; 
</span><span class='line'>    "b" + Permute("acd") 
</span><span class='line'>    &lt;list concatenation&gt;
</span><span class='line'>    "c" + Permute("bcd") 
</span><span class='line'>    &lt;list concatenation&gt;
</span><span class='line'>    "d" + Permute("abc") </span></code></pre></td></tr></table></div></figure>


<p>So, generate all of the permutations of the string without one of the elements of the original string, and concat it with all possible permutations of the smaller string, then concat all of those together to get the final list of permutations.</p>

<p>After speaking with Alan about a Haskell implementation, this is what I ended up with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'>
</span><span class='line'><span class="nf">permute</span> <span class="ow">::</span> <span class="kt">Eq</span> <span class="n">a</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="n">a</span><span class="p">]]</span>
</span><span class='line'><span class="nf">permute</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">[]</span><span class="p">]</span>
</span><span class='line'><span class="nf">permute</span> <span class="n">xs</span> <span class="ow">=</span> <span class="p">[</span> <span class="n">y</span> <span class="o">|</span> <span class="n">prefix</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="p">,</span> <span class="n">y</span> <span class="ow">&lt;-</span> <span class="n">map</span> <span class="p">(</span><span class="n">prefix</span><span class="kt">:</span><span class="p">)</span>
</span><span class='line'>                   <span class="o">$</span> <span class="n">permute</span> <span class="o">$</span> <span class="n">xs</span> <span class="o">\\</span> <span class="p">[</span><span class="n">prefix</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>An obnoxiously short list comprehension.</p>

<p>Pull the prefix from the original string, map a list concatenation of the prefix, (prefix:), to the various permutations of the rest of the string. <code>\\</code> is this nifty function in the Data.List library that performs list difference, so it was an easy way to exclude the prefix from the original string (thanks to Alan for showing me that).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">permute</span> <span class="s">&quot;abcd&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="s">&quot;abcd&quot;</span><span class="p">,</span><span class="s">&quot;abdc&quot;</span><span class="p">,</span><span class="s">&quot;acbd&quot;</span><span class="p">,</span><span class="s">&quot;acdb&quot;</span><span class="p">,</span><span class="s">&quot;adbc&quot;</span><span class="p">,</span><span class="s">&quot;adcb&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;bacd&quot;</span><span class="p">,</span><span class="s">&quot;badc&quot;</span><span class="p">,</span><span class="s">&quot;bcad&quot;</span><span class="p">,</span><span class="s">&quot;bcda&quot;</span><span class="p">,</span><span class="s">&quot;bdac&quot;</span><span class="p">,</span><span class="s">&quot;bdca&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;cabd&quot;</span><span class="p">,</span><span class="s">&quot;cadb&quot;</span><span class="p">,</span><span class="s">&quot;cbad&quot;</span><span class="p">,</span><span class="s">&quot;cbda&quot;</span><span class="p">,</span><span class="s">&quot;cdab&quot;</span><span class="p">,</span><span class="s">&quot;cdba&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;dabc&quot;</span><span class="p">,</span><span class="s">&quot;dacb&quot;</span><span class="p">,</span><span class="s">&quot;dbac&quot;</span><span class="p">,</span><span class="s">&quot;dbca&quot;</span><span class="p">,</span><span class="s">&quot;dcab&quot;</span><span class="p">,</span><span class="s">&quot;dcba&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recursion still blows my mind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sometimes, Giving Up Is A-okay.]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/09/sometimes/"/>
    <updated>2014-07-09T13:16:49-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/09/sometimes</id>
    <content type="html"><![CDATA[<p>After spending about a week and a half on my Haskell <a href="https://github.com/dariajung/haskell-bittorrent">BitTorrent client</a>, I&rsquo;ve decided to give it a rest. Am I done? No. Am I close to being done? Depends on what &ldquo;done&rdquo; means (but no, probably not).</p>

<p>I won&rsquo;t lie. I felt a pang of guilt today when I decided to put the project on the backburner.</p>

<p><img src="http://media2.giphy.com/media/lrNS45C9Df904/giphy.gif" alt="Finn crying" />
</br><sub>Actually, I was something like this on the inside.</sub></p>

<p>But what I&rsquo;ve learned is that when a project stops bringing joy and feels tedious, it is much better to move onto something else so my time can be spent productively. I asked my fellow Hacker Schoolers when they felt it was an appropriate time to move on from a project, and I got a lot of great responses. I was told it was okay to abandon a project if it made me feel sad, but I could write some documentation for it to feel some closure. It also wasn&rsquo;t apparent to me that because I was getting so hung up on trying to finish this project that I was missing other valuable opportunities, and this was pointed out to me by several alums.</p>

<p>I&rsquo;m pretty glad that I asked this question, because I&rsquo;m not sure how much longer I could have dragged on the BitTorrent project. I think I&rsquo;m ready to move onto OCaml and work through <a href="https://realworldocaml.org">Real World OCaml</a> and start afresh.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bencoding and Networking]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/01/bencoding-and-networking/"/>
    <updated>2014-07-01T10:15:49-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/01/bencoding-and-networking</id>
    <content type="html"><![CDATA[<p>One of the things that I have always been fearful of is networking. Sockets, TCP/IP, and forking, all of that. In a class at university, I had done some networking in C; I remember reading <a href="http://beej.us/guide/bgnet/">Beej&rsquo;s guide to network programming</a>, and I found myself returning to it, and appreciating it a bit more this time. It&rsquo;s funny how when you&rsquo;re learning something in school, you could care less about it. You just want to get from point A to point B in the shortest way possible. But when you have the time to be in a self-directed environment like Hacker School, you find yourself wanting to revisit things that you didn&rsquo;t learn properly the first time around, wanting to tell your past self: &ldquo;You should have paid more attention when you were learning this!&rdquo;</p>

<p>So, to learn networking in Haskell, I have decided to incrementally work towards building a simple Bittorrent client. Yesterday, I read about <a href="http://en.wikipedia.org/wiki/Bencode">bencode</a>, the encoding used by the Bittorrent protocol for torrent files (metadata).</p>

<p>Bencode supports four types of values:</p>

<ul>
<li>Integers</li>
<li>(Byte) Strings</li>
<li>Lists</li>
<li>Dictionaries (Hash Maps)</li>
</ul>


<p>Integers are encoded as <code>i&lt;integer encoded in base 10 ASCII&gt;e</code>. Integers can be negative, but 0 cannot be -0.</p>

<p>ByteStrings are encoded as <code>&lt;length&gt;:&lt;contents&gt;</code>. So &ldquo;foo&rdquo; would be encoded as 3:foo. The length of the content can be 0, but cannot be negative.</p>

<p>Lists are encoded as <code>l&lt;contents&gt;e</code>. Contents are bencoded elements of the list (in order), and are concatenated. Something like &ldquo;cat31&rdquo; would be encoded as l3:cati31ee.</p>

<p>Dictionaries are encoded as <code>d&lt;contents&gt;e</code>. The keys must be bytestrings, and the dictionary is ordered lexiographically by key. The encoded key value pair follow each other immediately. {&ldquo;cat&rdquo;: &ldquo;meow&rdquo;, &ldquo;dog&rdquo;: 44} would be encoded as d3:cat4:meow3:dogi44ee.</p>

<p>After reading this, I used the <a href="http://www.haskell.org/haskellwiki/Parsec">Parsec</a> library and wrote a parser for bencoded values in Haskell. I tested it on a torrent for Ubuntu and got back this:</p>

<p><img src="http://blog.dariajung.com/images/torrent.png" alt="&quot;Metadata&quot;" /></p>

<p>We can see things like:</p>

<ul>
<li>&ldquo;announce&rdquo;: &ldquo;<a href="http://torrent.ubuntu.com:6969/announce">http://torrent.ubuntu.com:6969/announce</a>&rdquo;</li>
<li>&ldquo;announce-list&rdquo;: &ldquo;<a href="http://torrent.ubuntu.com:6969/announce">http://torrent.ubuntu.com:6969/announce</a>&rdquo;, &ldquo;<a href="http://ipv6.torrent.ubuntu.com:6969/announce">http://ipv6.torrent.ubuntu.com:6969/announce</a>&rdquo;</li>
<li>&ldquo;comment&rdquo;: &ldquo;Ubuntu CD releases.ubuntu.com&rdquo;</li>
<li>&ldquo;creation date&rdquo;: 1391706680</li>
</ul>


<p>and so on.</p>

<p>The crazy wall of text is mostly due to all of the pieces for this particular torrent.</p>

<p>After this, to get a better sense of networking in Haskell, I read up on TCP/IP and started working towards this <a href="http://www.haskell.org/haskellwiki/Implement_a_chat_server">tutorial</a> on building a multi-threaded chat server in Haskell, and getting a feel for the Network.Socket library.</p>

<p>At the very basic level: Socket &ndash;> Bind &ndash;> Listen &ndash;> Accept.</p>

<p>My networking journey will continue today&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 13]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/27/hacker-school-day-13/"/>
    <updated>2014-06-27T16:33:32-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/27/hacker-school-day-13</id>
    <content type="html"><![CDATA[<p>Day 13 of Hacker School went by pretty quickly, mostly due to some of us playing hooky to go watch the Germany vs. USA game. We were initially going to go to a German bar, but it turns out there were a lot of Germans there already (I guess they like their futbol). We ended up back tracking and found a bar called Sweet &amp; Vicious, which was sweet (their jargaritas are great), but not particularly vicious. The game was slow paced, and the atmosphere of the bar made it a nice spot to lounge.</p>

<p><img src="http://blog.dariajung.com/images/jargarita.png" alt="dat jargarita" /></p>

<p>I guess my main reason for leaving in the middle of the day was that I was in a weird headspace after the goal making workshop. I started to doubt my decisions about the things I wanted to do this summer and that was bumming me out. On top of that, I couldn&rsquo;t install <a href="http://www.haskell.org/haskellwiki/ThreadScope">threadscope</a> to save my life, and spent almost five hours trying to get that to run (yay yak-shaving) before just giving up and deciding to read <a href="http://chimera.labs.oreilly.com/books/1230000000929">Simon Marlow&rsquo;s book</a> without it.</p>

<p>I did have a productive talk with Allison yesterday. My worries were that I was working on Haskell, a language that is rather impractical for the purpose of jobs and I wasn&rsquo;t sure if I should switch to Python or not. Which turns out it was a rather silly fear to have since I am going back to school and won&rsquo;t ostensibly be looking for a new job for at least two more years. So I have decided to stick with Haskell, and will work on some side projects in Python once in a while when the mood strikes me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Days 11 &amp; 12]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/25/hacker-school-days-11-and-12/"/>
    <updated>2014-06-25T20:36:12-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/25/hacker-school-days-11-and-12</id>
    <content type="html"><![CDATA[<p>I&rsquo;m getting behind on my blogging, meep.</p>

<p>Day 11 recap:</p>

<ul>
<li>Spent half of the day trying to debug my sudoku solver&rsquo;s board parser, which was pretty difficult as everything type checked, but I was getting the wrong output.</li>
<li>Learned about the <a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci-debugger.html">GHCI interactive debugger</a>, which let me place break points and inspect variables where the execution of the program has stopped.</li>
<li>Alan gave me a quick overview of &ldquo;equational debugging&rdquo;, which is to test little snippets of your program and make sure that it is returning the right output.</li>
<li>I ended up pulling out more complicated bits of my code into smaller functions to make equational debugging more manageable.</li>
<li>Spent the rest of the day finishing up the sudoku solver. I debugged the constraint propagation aspect of the program, and then implemented the depth first search function which utilized the constraint propagation logic.</li>
</ul>


<p>Day 12 (today!), I decided to take (another) break from Haskell. I played around for most of the day with Paper.js, trying to make something beautiful, but eventually found that it didn&rsquo;t actually interest me too much. Around 3:00 pm, Stacy from Winter 2013 batch came by Hacker School to do a goal making workshop. It did really get me thinking about my time at Hacker School, and how I need to figure out when I can say that I have achieved my goal of being literate in Haskell. I think I will spend maybe a couple more weeks max on Haskell, and then switch over to Python. My main fear is that while Haskell is awesome, it isn&rsquo;t exactly a language that I will be able to work in once I become a professional software engineer.</p>

<p>After hitting a dead end with Paper.js, I decided to pivot and play around with Python. I implemented a simple echo server in Python, where the client will send back what the server sent to it. Then I got the idea to work on a GIF bot for Zulip because sometimes emoji just aren&rsquo;t enough :). You can ask gif bot &ldquo;gif me cats&rdquo; and an API query is sent to <a href="http://giphy.com/">Giphy</a>, and gif bot returns a gif that has been tagged with cats, in this example. It&rsquo;s basically done at this point, and works locally, but I&rsquo;m not sure what the protocol is for having a permanent presence from the bot. Do I serve it on AWS/Heroku? I think I will ask Allison tomorrow. I&rsquo;m also curious if I should demo this tomorrow afternoon.</p>

<p>Here is gif bot in action:</p>

<p><img src="http://blog.dariajung.com/images/gifbot.png" alt="&quot;Gif Bot in action&quot;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Days 9 &amp; 10]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/24/hacker-school-days-9-and-10/"/>
    <updated>2014-06-24T09:58:30-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/24/hacker-school-days-9-and-10</id>
    <content type="html"><![CDATA[<p>I didn&rsquo;t get a chance to blog about last Friday (Day 9) so I&rsquo;ll do a quick recap:</p>

<ul>
<li>First day of interview prep.</li>
<li>Worked on <a href="https://hackpad.com/Manage-those-phone-books-wK1MycZ5ATb">Manage those Phonebooks</a> in Python.</li>
<li>Turns out I had a lot of trouble parsing command line inputs, so I spent a good chunk of time on that before I decided to come back to it at the end.</li>
<li>This exercise made me feel a bit uncomfortable about how well I know a language. I&rsquo;ve been spending all of my time on Haskell and haven&rsquo;t touched Java or Python in a while.</li>
<li>Continued reading about Monads.</li>
</ul>


<p>Yesterday (Day 10), we received new check-in groups. It seems that they rotate every two weeks, and I&rsquo;m enjoying that as it gives me the chance to interact with more of my fellow Hacker Schoolers in a smaller setting.</p>

<p>I spent a good chunk of the morning finishing up the last assignment from Brent Yorgey&rsquo;s Haskell course programming a Risk, the <a href="https://en.wikipedia.org/wiki/Risk_(game)" target="_blank">boardgame</a>, simulator. It was cool to play around with Random generators to simulate die rolls, and also to simulate 1000 invasions (repeated calls to battle until there are no defenders remaining, or fewer than two attackers left) of varying defending and attacking army sizes. This was encompassed in a Battlefield data type, where Battlefield is defined as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">type</span> <span class="kt">Army</span> <span class="ow">=</span> <span class="kt">Int</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Battlefield</span> <span class="ow">=</span> <span class="kt">Battlefield</span>
</span><span class='line'>                   <span class="p">{</span> <span class="n">attackers</span> <span class="ow">::</span> <span class="kt">Army</span><span class="p">,</span> <span class="n">defenders</span> <span class="ow">::</span> <span class="kt">Army</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this, I ended up stumbling on Peter Norvig&rsquo;s Sudoku solver <a href="http://norvig.com/sudoku.html">paper</a> and decided to implement it in Haskell. I&rsquo;ve been struggling through lots of type errors but I was surprised and happy to find that I got so engrossed in my task that I stayed at Hacker School for almost 12 hours yesterday. It&rsquo;s really neat to be this absorbed in something, and feeling myself gain more confidence through being challenged by my own curiosities. Once I finish this up, I will definitely be needing some code review.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 8]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/19/hacker-school-day-8/"/>
    <updated>2014-06-19T21:35:35-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/19/hacker-school-day-8</id>
    <content type="html"><![CDATA[<p>End of week two. Crazy!</p>

<p>This morning, I spent a bit of time pairing with Dana and Georgi on Arduino and hardware things. Dana introduced us to <a href="http://www.firmata.org/wiki/Main_Page">Firmata</a>, a protocol for interfacing with the Arduino in different programming languages (instead of using the Arduino language, C/C++, or Assembly). She gave us examples in Node.js using <a href="https://github.com/rwaldron/johnny-five">Johnny Five</a> and Python using <a href="https://pypi.python.org/pypi/pyFirmata/0.9.5">PyFirmata</a>. I ended up playing around with the Python example and an Arduino that was set up with a potentiometer, an LED, and a servo motor. Depending on the value read from the petentiometer, the LED would blink at a different rate, and the servo would move to a different angle.</p>

<p>After seeing how this worked, and looking through the spare hardware parts at Hacker School, we found a photocell, which senses the amount of light being received. I hooked up the photocell to the breadboard and Arduino using this <a href="https://learn.adafruit.com/photocells/using-a-photocell">guide</a> from AdaFruit &#10084; and a little help from Dana, and now the LED and servo were reacting to the readings from the photocell.</p>

<p><img src="http://blog.dariajung.com/images/firmata.jpg" alt="&quot;PyFirmata + Arduino&quot;" /></p>

<p>After playing around with this, I got an idea to use a temperature and humidity sensor for garden/plant health. The Arduino would gather data, and if your plants need a little love, it would trigger something that would text you (maybe using Twilio) to tend to them. I need to order the temperature/humidity sensor before I can get started but I think this would be a fun hack that encompasses hardware and web development.</p>

<p>Once the hardware workshop concluded, I went back to Haskell where I started reading about Monads (<em>eeep</em>). Actually, Monads so far haven&rsquo;t been that scary. Confusing, yes, but not scary. Just another level of complexity up from an Applicative Functor. In fact, all Monads are Applicative Functors. The distinguishing factor is that Monads have the (>>=), or <em>bind</em>, method in their definition.</p>

<p>A Monad is defined as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">class</span> <span class="kt">Monad</span> <span class="n">m</span> <span class="kr">where</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&gt;&gt;=</span><span class="p">)</span> <span class="ow">::</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span><span class='line'>    <span class="n">return</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</span><span class='line'>    <span class="n">fail</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>From what I can understand, (>>=) basically lets you pass some value of a Monadic context to a function that expects a normal value, and outputs a Monadic value.</p>

<p>Something else that struck me was that the definition of (>>) seems exactly like the definition of (*>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">Monad</span> <span class="n">m</span> <span class="ow">=&gt;</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span><span class='line'><span class="p">(</span><span class="o">*&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">Applicative</span> <span class="n">f</span> <span class="ow">=&gt;</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>So cool.</p>

<p><code>(&gt;&gt;)</code> and <code>(*&gt;)</code> ignore the result of the first monadic value/applicative functor but <strong>not</strong> their effects.</p>

<p>I ended up reading most of LYaH&rsquo;s <a href="http://learnyouahaskell.com/a-fistful-of-monads">chapter</a> on Monads, and have gotten a better understanding of both applicative functors and monads. I still have lots of reading material left, so I will continue that tomorrow.</p>

<p>As today was Thursday, Hacker Schoolers demo&rsquo;d projects that they had been working on. Many of the projects were interesting, challenging, and quite frankly, a bit intimidating. They ranged from maze/percolater solvers, to CPUs in Clojure, to letting you edit Jekyll blogs in the browser! I wondered to myself if I would ever be presenting at a demo session this summer. The thought did cross my mind that maybe I should give up on learning Haskell because it is getting incredibly difficult for me to process, and everyone else seemed to be much more productive with their time than I was. I don&rsquo;t know, I will think on this more.</p>

<p>Mihai&rsquo;s demo on creating music and outputting the result as MIDI files actually inspired me to search for something that would allow me to do that in Haskell. I was able to come across the <a href="https://github.com/Euterpea/Euterpea">Euterpea</a> library, which looks very promising. I think it would be fun to create a Markov Chain that took training data of different songs, and created new compositions. I hope to play around with this some in the coming days.</p>

<p>To conclude the day, Marisa, Alex, Rachel, and I started watching a documentary on the font Helvetica. It was very interesting to see how Helvetica&rsquo;s usage has evolved over time, and also the connotations that it has to people. Going from a clean, revolutionary font to an overused &ldquo;nameless&rdquo; font (as it is now employed by many corporations and government agencies) has given Helvetica an interesting reputation. Some people see it as the font of wars (Vietnam, Iraq war), and some see it as the quintessential modern typeface; a debate between modernists and postmodernists.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 7]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/18/hacker-school-day-7/"/>
    <updated>2014-06-18T16:22:18-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/18/hacker-school-day-7</id>
    <content type="html"><![CDATA[<p>I can&rsquo;t believe it has already been a week and a half at Hacker School. Wow. 12 weeks seems like a lot but the time is already flying by.</p>

<p>Today, I decided to resume my studies in Haskell. I worked on the week 11 assignment for Brent Yorgey&rsquo;s Haskell course. I continued working with the <code>Parser</code> data type, implementing some utilies and several new Parsers.</p>

<p>This is where I was introduced to <code>*&gt;</code> and <code>&lt;*</code> and the concept of lifting in functional programming (which I am still having a hard time fully understanding).</p>

<p>Described in the source for module <code>Control.Applicative</code> as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- | Sequence actions, discarding the value of the first argument.</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*&gt;</span><span class="p">)</span> <span class="ow">=</span> <span class="n">liftA2</span> <span class="p">(</span><span class="n">const</span> <span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- | Sequence actions, discarding the value of the second argument.</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&lt;*</span><span class="p">)</span> <span class="ow">::</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">a</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&lt;*</span><span class="p">)</span> <span class="ow">=</span> <span class="n">liftA2</span> <span class="n">const</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using some examples I worked out by hand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="p">(</span><span class="n">spaces</span> <span class="o">*&gt;</span> <span class="n">posInt</span><span class="p">)</span> <span class="s">&quot; 345&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I understood this computation as first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">spaces</span> <span class="s">&quot; 345&quot;</span>
</span><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span> <span class="s">&quot;345&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>" "</code>, the result, is disregarded. We pass on &ldquo;345&rdquo; to the next call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">posInt</span> <span class="s">&quot;345&quot;</span>
</span><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="mi">345</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we are ignoring the result of <code>runParser spaces " 345"</code>, the final result is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="mi">345</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the same inputs, but for <code>&lt;*</code> this time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="p">(</span><span class="n">spaces</span> <span class="o">&lt;*</span> <span class="n">posInt</span><span class="p">)</span> <span class="s">&quot; 345&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">spaces</span> <span class="s">&quot; 345&quot;</span>
</span><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span> <span class="s">&quot;345&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This time, we <em>don&rsquo;t</em> disregard <code>" "</code>.</p>

<p>We pass on &ldquo;345&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">posInt</span> <span class="s">&quot;345&quot;</span>
</span><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="mi">345</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are ignoring <code>345</code>, the result of <code>runParser posInt "345"</code>.</p>

<p>The final result ends up being:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool, how about one more.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="p">(</span><span class="n">ident</span> <span class="o">&lt;*</span> <span class="n">posInt</span><span class="p">)</span> <span class="s">&quot;hello 345&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">ident</span> <span class="s">&quot;hello 345&quot;</span>
</span><span class='line'><span class="kt">Just</span> <span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot; 345&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We keep <code>"hello"</code> and pass on <code>" 345"</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">ghci</span><span class="o">&gt;</span> <span class="n">runParser</span> <span class="n">posInt</span> <span class="s">&quot; 345&quot;</span>
</span><span class='line'><span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure>


<p>Uh oh. We got <code>Nothing</code>. There is no state for us to use in the return <code>Maybe</code> tuple, so we end up with <code>Nothing</code>.</p>

<ul>
<li><code>posInt :: Parser Integer</code> : Checks for positive integers in String input.</li>
<li><code>spaces :: Parser String</code> : Checks for spaces in String input.</li>
<li><code>ident :: Parser String</code> : an identiﬁer can be any nonempty sequence of letters and digits, except that it may not start with a digit.</li>
</ul>


<p>I got this far in my understanding of these functions, but I still do not quite understand what is being &ldquo;lifted&rdquo; behind the scenes.</p>

<p>Lifting in the case of <code>(a -&gt; b) -&gt; f a -&gt; f b</code> is defined in LYaH as &ldquo;a function that takes a function and returns a new function that&rsquo;s just like the old one, only it takes a functor as a parameter and returns a functor as the result.&rdquo; I will mull this over more tonight, and perhaps ask Alan or some alumni in Zulip tomorrow if I am still having a hard time understanding the concept.</p>

<p>For about 30 minutes, I worked through the first six problems of <a href="http://www.haskell.org/haskellwiki/99_questions">99 Haskell Problems</a>. It&rsquo;s been pretty fun to revist things I learned a while back now that I am getting wrapped up in the intricacies of Haskell. My brain feels like it is exploding all the time.</p>

<p>Learning Haskell has been challenging. It is definitely rewarding, but there are many times when I feel discouraged because I don&rsquo;t know when I will understand things like Applicative Functors like the back of my hand. I often feel afraid that I <em>won&rsquo;t</em> ever understand these things, but then I tell myself, what&rsquo;s the rush?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: Day 6]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/17/hacker-school-day-6/"/>
    <updated>2014-06-17T17:09:44-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/17/hacker-school-day-6</id>
    <content type="html"><![CDATA[<p>Today, I decided to take a mini break from Haskell (erm, I still did a wee bit of Haskell) and work on a one off project. I got in a bit early, around 9:30 am to finish up the <a href="http://blog.dariajung.com/blog/2014/06/16/applicative-functors/">Applicative Functors</a> blog post. I was pretty impressed with how many Hacker Schoolers were already in at that point, and felt eager to start working.</p>

<p>The little bit of Haskell I did today was to implement an <code>Alternative</code> instance for a <code>Parser</code>.</p>

<p>If we remember from my previous blogpost, <code>Parser</code> is defined as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">newtype</span> <span class="kt">Parser</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Parser</span> <span class="p">{</span> <span class="n">runParser</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="kt">String</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Applicative Parser</code> instance is useful for making parsers of fixed and simple formats. Because we want to be able to handle
the concept of <em>choice</em>, we turn to the <code>Alternative</code> class.</p>

<p>The <code>Alternative</code> class is defined something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">class</span> <span class="kt">Applicative</span> <span class="n">f</span> <span class="ow">=&gt;</span> <span class="kt">Alternative</span> <span class="n">f</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">empty</span> <span class="ow">::</span> <span class="n">f</span> <span class="n">a</span>
</span><span class='line'>    <span class="p">(</span><span class="o">&lt;|&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>(&lt;|>) denotes a choice, so something like <code>p &lt;|&gt; q</code> means a choice between <code>p</code> or <code>q</code>.</p>

<p>So, my <code>Alternative</code> instance ended up being:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">instance</span> <span class="kt">Alternative</span> <span class="kt">Parser</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">empty</span> <span class="ow">=</span> <span class="kt">Parser</span> <span class="o">$</span> <span class="n">const</span> <span class="kt">Nothing</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">&lt;|&gt;</span> <span class="n">q</span> <span class="ow">=</span> <span class="kt">Parser</span> <span class="o">$</span> <span class="nf">\</span><span class="n">s</span> <span class="ow">-&gt;</span> <span class="n">runParser</span> <span class="n">p</span> <span class="n">s</span> <span class="o">&lt;|&gt;</span> <span class="n">runParser</span> <span class="n">q</span> <span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<p>An important hint here is that there is already an Alternative instance for Maybe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">instance</span> <span class="kt">Alternative</span> <span class="kt">Maybe</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">empty</span> <span class="ow">=</span> <span class="kt">Nothing</span>
</span><span class='line'>    <span class="kt">Nothing</span> <span class="o">&lt;|&gt;</span> <span class="n">p</span> <span class="ow">=</span> <span class="n">p</span>
</span><span class='line'>    <span class="kt">Just</span> <span class="n">x</span> <span class="o">&lt;|&gt;</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">Just</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means that we can simply call <code>runParser p s</code> and <code>runParser q s</code>, which gives us Maybe tuples. We can then use (&lt;|>) from the <code>Alternative</code> instance of <code>Maybe</code> to choose between those two tuples and pass it to the Parser constructor.</p>

<p>If <code>runParser p s</code> succeeds, return its results, else try <code>runParser q s</code>. If that succeeds, return its results. Otherwise, a <code>Nothing</code> will be returned.</p>

<p>Pretty nifty!</p>

<p>The rest of today, I worked on a very simple <a href="https://github.com/dariajung/url_shortener">URL shortener</a>.</p>

<p>I found a tutorial online that used the md5 hashing algorithm and a base 64 encoding to generate a randomized string. The last five characters of this were taken, sanitized, and then used as the key for a key value store in Redis as well as a slug.</p>

<p>I whipped up a simple Flask app for 301 redirects from the shortened URL to the original URL. A quick lookup in Redis, and then a <code>return redirect(location, 301)</code> call did the trick.</p>

<p><code>http://blog.dariajung.com</code> results in <code>http://localhost:5000/iJp4fHs</code>. When I go to that URL, I am then redirected to my original URL.</p>

<p>The functionality is all very simple, so I don&rsquo;t check that the protocol identifier and such are in the URL. That might be for another day.</p>

<p>Overall, I think today was rather productive!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Applicative Functors]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/16/applicative-functors/"/>
    <updated>2014-06-16T17:02:53-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/16/applicative-functors</id>
    <content type="html"><![CDATA[<p>Today at Hacker School, I was studying functors and applicative functors in Haskell. Functors are structures that &ldquo;can be mapped over&rdquo; [1]. So, applicative functors are functors that allow functions to be applied <em>within</em> a functor. Functor-ception.</p>

<p>This concept proved to be a pretty difficult one for me to grasp today. I wrangled with it for several hours, reading and re-reading Learn You a Haskell&rsquo;s <a href="http://learnyouahaskell.com/functors-applicative-functors-and-monoids">explanation</a> for them before I broke down and asked for help on the Haskell Zuplip thread. (Now I know that I should ask for help if I can&rsquo;t figure something out in 15 minutes on my own.)</p>

<p>The particular problem I was sweating over was writing an Applicative instance for a <code>Parser</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">newtype</span> <span class="kt">Parser</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Parser</span> <span class="p">{</span> <span class="n">runParser</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="kt">String</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was eventually able to come up with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">instance</span> <span class="kt">Applicative</span> <span class="kt">Parser</span> <span class="kr">where</span>
</span><span class='line'>    <span class="n">pure</span> <span class="n">x</span> <span class="ow">=</span> <span class="kt">Parser</span> <span class="o">$</span> <span class="nf">\</span><span class="n">s</span> <span class="ow">-&gt;</span> <span class="kt">Just</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">&lt;*&gt;</span> <span class="n">q</span> <span class="ow">=</span> <span class="kt">Parser</span> <span class="o">$</span> <span class="nf">\</span><span class="n">s</span> <span class="ow">-&gt;</span>
</span><span class='line'>            <span class="kr">case</span> <span class="p">(</span><span class="n">runParser</span> <span class="n">p</span> <span class="n">s</span><span class="p">)</span> <span class="kr">of</span>
</span><span class='line'>                <span class="kt">Nothing</span> <span class="ow">-&gt;</span> <span class="kt">Nothing</span>
</span><span class='line'>                <span class="kt">Just</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">s&#39;</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kr">case</span> <span class="p">(</span><span class="n">runParser</span> <span class="n">q</span> <span class="n">s&#39;</span><span class="p">)</span> <span class="kr">of</span>
</span><span class='line'>                    <span class="kt">Nothing</span> <span class="ow">-&gt;</span> <span class="kt">Nothing</span>
</span><span class='line'>                    <span class="kt">Just</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">s&#39;&#39;</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Just</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">,</span> <span class="n">s&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Applicative instances have a <code>pure</code> method and a <code>&lt;*&gt;</code> method. <code>Pure</code> is simple enough. It has a type declaration of <code>pure :: a -&gt; f a</code>. Basically, it takes a value of any type, and returns that value wrapped in an applicative functor. Where I had trouble was implementing <code>&lt;*&gt;</code>. <code>&lt;*&gt;</code> has a type declaration of <code>f (a -&gt; b) -&gt; f a -&gt; f b</code>. Basically, it is like <code>fmap</code>, but it takes a functor with a function in it, and another functor. The function from the first functor is sort of mapped over the value in the second functor.</p>

<p>Chen, Hacker School W &lsquo;13, was a saint and guided me in grasping the intuition behind writing this applicative instance. <code>P</code> and <code>q</code> are both functors here. <code>P</code>, however, is the functor that holds a function within it. In order to apply this function to the second functor, he was able to explain to me that I needed to &ldquo;unwrap&rdquo; the each functor and pass each state on to the subsequent action. In this case, that would be to call <code>runParser</code> on the functor <code>p</code> and the first state <code>s</code>, which would return a type of <code>Maybe ((a-&gt;b), String)</code>. This is where the cases come in. The result of <code>runparser p s</code> could either be <code>Nothing</code> or <code>Just (f, s')</code>, where <code>f</code> is of type declaration <code>(a-&gt;b)</code> and <code>s'</code> is the second state. In the case of <code>Nothing</code>, we return <code>Nothing</code> because there is nothing to pass on to the second functor. On the other hand, we again run <code>runParser</code> to &ldquo;unwrap&rdquo; the second functor. Just as before, in the case of <code>Nothing</code>, we return <code>Nothing</code>. Otherwise, we get <code>Just (x, s'')</code>, where <code>x</code> is of type <code>a</code> and <code>s''</code> is the third state. With this, we can now apply <code>f</code> on <code>x</code> to go from something of type <code>a</code> to type <code>b</code>, and return the third state <code>s''</code>, resulting in <code>Just (f x, s'')</code>.</p>

<p>Whew. I definitely learned a ton doing this. I hope my explaination made sense!</p>

<p>Resources <br/>
[1] <a href="http://en.wikibooks.org/wiki/Haskell/Applicative_Functors">Haskell/Applicative Functors</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Week 1]]></title>
    <link href="http://blog.dariajung.com/blog/2014/06/15/hacker-school-week-1/"/>
    <updated>2014-06-15T18:20:07-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/06/15/hacker-school-week-1</id>
    <content type="html"><![CDATA[<p><img src="http://blog.dariajung.com/images/hs_logo.png" alt="&quot;HS Logo&quot;" /></p>

<p>This past week was my first week at Hacker School, and I am finally getting around to setting up a blog!</p>

<p>I really haven&rsquo;t had much success with blogging in the past, so I am wondering how this is going to go, but I will try my best to write something everyday. The posts from my fellow batchmates have been very exciting to read, and have been a motivating factor for me to finally get Octopress set up.</p>

<p>Because I had already been working on a <a href="http://www.seas.upenn.edu/~cis194/lectures.html">course on Haskell</a> that I found online before Hacker School started, that was mainly what I focused on during my first week. The course is broken up into 12 lectures, with corresponding homework assignments. The amazing thing is, I was able to work through about one week&rsquo;s worth of material <em>per day</em>. It&rsquo;s incredible what can happen when you are learning for the sake of learning, with no worries that generally come from a work or school setting. If you had told me one year ago that I would be geeking out over Haskell, I would have laughed in your face. I would have thought that it was too academic, too hard of a language for someone like myself to learn. What I am finding though, is that once I commited myself to learning Haskell, once I was comfortable with the idea that I <em>too</em> was capable of learning Haskell, I started to have fun with the assignments.</p>

<p>The most recent assignment I worked on was with using the rose tree data structure from the <code>Data.Tree</code> library. Based on a tree of employees, where employees are given a name and a &ldquo;fun&rdquo; score, I was given the task of maximizing the fun score for a party and  returning its optimized guest list. The caveat is that if an employee&rsquo;s direct superior were also in attendance of the party, that employee wouldn&rsquo;t be able to have any fun, lowering their fun score to 0.</p>

<p>I think my road block for this assignment was implementing a fold function for the <code>tree</code> data type (to which I could pass a function that found the max fun score at each subtree later). I wasn&rsquo;t sure what the type signature for the fold should have been, which took up the most of my time. Once I got this function worked out, I was able to work through the rest of the assignment.</p>

<p>I wrote the fold as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">treeFold</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Tree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span>
</span><span class='line'><span class="nf">treeFold</span> <span class="n">f</span> <span class="n">tree</span> <span class="ow">=</span> <span class="n">f</span> <span class="p">(</span><span class="n">rootLabel</span> <span class="n">tree</span><span class="p">)</span> <span class="p">(</span><span class="n">map</span> <span class="p">(</span><span class="n">treeFold</span> <span class="n">f</span><span class="p">)</span> <span class="p">(</span><span class="n">subForest</span> <span class="n">tree</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>tree</code> is defined as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'> <span class="kr">data</span> <span class="kt">Tree</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Node</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rootLabel</span> <span class="ow">::</span> <span class="n">a</span><span class="p">,</span> <span class="c1">-- label value</span>
</span><span class='line'>    <span class="n">subForest</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Tree</span> <span class="n">a</span><span class="p">]</span> <span class="c1">-- zero or more child trees</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>rootLabel</code> of the tree returns the element at that Node and then we map <code>treeFold f</code> to the subtrees of the Node, recursively calling <code>treeFold f</code> on the subtrees. These are then passed as parameters to the function <code>f</code>.</p>

<hr />

<p>Something else that I did last week was playing with Arduinos and Addressable LEDs (each pixel is individually programmable!). I bought an Arduino UNO a few years ago, and never had really done anything with it. Dana, a batchmate with lots of hardware experience, brought some addressable LEDs in for some of the Hacker Schoolers to play with.</p>

<p>The cool thing was that Adafruit already had a library called <a href="https://github.com/adafruit/Adafruit_NeoPixel">Adafruit NeoPixels</a> we could use, so we were able to just hook up the LEDs to the Arduino and we immediately saw a light show.</p>

<p><img src="http://blog.dariajung.com/images/led.jpg" alt="&quot;HS Logo&quot;" /></p>

<p>We played around with making the LEDs blink, which we achieved by Mod-ing the number of LEDs, and then changing the RGB value to (0, 0, 0). It definitely distilled the fear of hardware many of us had once we understood how easy it was to get started with it with all of the resources online. I am totally obsessed with Adafruit now!</p>

<p>My hardware project that I would like to accomplish this summer is a temperature sensor that based on the serial output changes the colors of the addressable LEDs. If warm, the LEDs light up yellow/orange, if cool, a green color, etc.</p>

<p>I am loving Hacker School thus far. Well, love is a bit of an understatement.</p>
]]></content>
  </entry>
  
</feed>
