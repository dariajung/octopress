<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Networking | Hacker School Log]]></title>
  <link href="http://blog.dariajung.com/blog/categories/networking/atom.xml" rel="self"/>
  <link href="http://blog.dariajung.com/"/>
  <updated>2014-07-28T23:36:30-04:00</updated>
  <id>http://blog.dariajung.com/</id>
  <author>
    <name><![CDATA[Daria Jung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bencoding and Networking]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/01/bencoding-and-networking/"/>
    <updated>2014-07-01T10:15:49-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/01/bencoding-and-networking</id>
    <content type="html"><![CDATA[<p>One of the things that I have always been fearful of is networking. Sockets, TCP/IP, and forking, all of that. In a class at university, I had done some networking in C; I remember reading <a href="http://beej.us/guide/bgnet/">Beej&rsquo;s guide to network programming</a>, and I found myself returning to it, and appreciating it a bit more this time. It&rsquo;s funny how when you&rsquo;re learning something in school, you could care less about it. You just want to get from point A to point B in the shortest way possible. But when you have the time to be in a self-directed environment like Hacker School, you find yourself wanting to revisit things that you didn&rsquo;t learn properly the first time around, wanting to tell your past self: &ldquo;You should have paid more attention when you were learning this!&rdquo;</p>

<p>So, to learn networking in Haskell, I have decided to incrementally work towards building a simple Bittorrent client. Yesterday, I read about <a href="http://en.wikipedia.org/wiki/Bencode">bencode</a>, the encoding used by the Bittorrent protocol for torrent files (metadata).</p>

<p>Bencode supports four types of values:</p>

<ul>
<li>Integers</li>
<li>(Byte) Strings</li>
<li>Lists</li>
<li>Dictionaries (Hash Maps)</li>
</ul>


<p>Integers are encoded as <code>i&lt;integer encoded in base 10 ASCII&gt;e</code>. Integers can be negative, but 0 cannot be -0.</p>

<p>ByteStrings are encoded as <code>&lt;length&gt;:&lt;contents&gt;</code>. So &ldquo;foo&rdquo; would be encoded as 3:foo. The length of the content can be 0, but cannot be negative.</p>

<p>Lists are encoded as <code>l&lt;contents&gt;e</code>. Contents are bencoded elements of the list (in order), and are concatenated. Something like &ldquo;cat31&rdquo; would be encoded as l3:cati31ee.</p>

<p>Dictionaries are encoded as <code>d&lt;contents&gt;e</code>. The keys must be bytestrings, and the dictionary is ordered lexiographically by key. The encoded key value pair follow each other immediately. {&ldquo;cat&rdquo;: &ldquo;meow&rdquo;, &ldquo;dog&rdquo;: 44} would be encoded as d3:cat4:meow3:dogi44ee.</p>

<p>After reading this, I used the <a href="http://www.haskell.org/haskellwiki/Parsec">Parsec</a> library and wrote a parser for bencoded values in Haskell. I tested it on a torrent for Ubuntu and got back this:</p>

<p><img src="/images/torrent.png" alt="&quot;Metadata&quot;" /></p>

<p>We can see things like:</p>

<ul>
<li>&ldquo;announce&rdquo;: &ldquo;<a href="http://torrent.ubuntu.com:6969/announce">http://torrent.ubuntu.com:6969/announce</a>&rdquo;</li>
<li>&ldquo;announce-list&rdquo;: &ldquo;<a href="http://torrent.ubuntu.com:6969/announce">http://torrent.ubuntu.com:6969/announce</a>&rdquo;, &ldquo;<a href="http://ipv6.torrent.ubuntu.com:6969/announce">http://ipv6.torrent.ubuntu.com:6969/announce</a>&rdquo;</li>
<li>&ldquo;comment&rdquo;: &ldquo;Ubuntu CD releases.ubuntu.com&rdquo;</li>
<li>&ldquo;creation date&rdquo;: 1391706680</li>
</ul>


<p>and so on.</p>

<p>The crazy wall of text is mostly due to all of the pieces for this particular torrent.</p>

<p>After this, to get a better sense of networking in Haskell, I read up on TCP/IP and started working towards this <a href="http://www.haskell.org/haskellwiki/Implement_a_chat_server">tutorial</a> on building a multi-threaded chat server in Haskell, and getting a feel for the Network.Socket library.</p>

<p>At the very basic level: Socket &ndash;> Bind &ndash;> Listen &ndash;> Accept.</p>

<p>My networking journey will continue today&hellip;</p>
]]></content>
  </entry>
  
</feed>
