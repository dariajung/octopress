<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Haskell | Hacker School Log]]></title>
  <link href="http://blog.dariajung.com/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://blog.dariajung.com/"/>
  <updated>2014-07-28T23:36:30-04:00</updated>
  <id>http://blog.dariajung.com/</id>
  <author>
    <name><![CDATA[Daria Jung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Working Gunzip and Soldering]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/24/a-working-gunzip-and-soldering/"/>
    <updated>2014-07-24T10:01:32-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/24/a-working-gunzip-and-soldering</id>
    <content type="html"><![CDATA[<p>Yesterday was a super productive day for me. In the morning, I was in the midst of debugging my gunzip implementation in Haskell.
I have a function <code>addItem</code> that adds a node to a HuffmanTree by writing an IORef val because I needed mutability. When I&rsquo;m creating the HuffmanTree, I need to add a whole slew of values (from a code table) into the tree, so I mapped the addItem function over the list of codes, which returned <code>[IO()]</code>. My problem here was that despite having added items to an initial empty tree, I was returning an unaltered tree. I was confused because I was sure I had allowed for mutability! But why?!</p>

<p>Luckily, Alan happened to be running an impromptu session on Monads where he covered the IO Monad, and attending that helped me figure out what my problem was, I think.</p>

<p>I&rsquo;m still not precisely sure if I&rsquo;m understanding correctly but <code>[IO()]</code> is a list of <code>IO()</code>s. And things in the IO monad won&rsquo;t evaluate until run-time. So basically I had a list of thunk-like things that wouldn&rsquo;t write until evaluated.</p>

<p>This does not work
<code>haskell
let added =  map (\(label, codes) -&gt; addItem root label codes) code_table
</code></p>

<p>but this works
<code>haskell
added &lt;- sequence $ map (\(label, codes) -&gt; addItem root label codes) (code_table)
</code></p>

<p>As an aside, <code>added</code> is actually a useless value (it&rsquo;s just a list of <code>()</code>s). I don&rsquo;t care about it. All I care about is the value of <code>root</code> because I have mutated it to add nodes to it.</p>

<p>After this, I spent some time fixing off by one errors because I was translating Julia code to Haskell and Julia is 1-indexed while Haskell is 0-index. Lol. THEN IT WORKED. HUZZAH!</p>

<p>In the afternoon into the evening, I worked with Dana, Minnie, and Sophia on soldering chips, wires, and LEDs together. It was loads of fun and will continue today, I suspect.</p>

<p><img src="https://pbs.twimg.com/media/BtRShaVIUAAQ6LR.jpg:large" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Halfway, What???]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/23/halfway/"/>
    <updated>2014-07-23T09:52:02-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/23/halfway</id>
    <content type="html"><![CDATA[<p>Wow, wow, wow. This week marked the halfway point of my time at Hacker School. It&rsquo;s been an exciting time, with the incoming of the new batch (28 new Hacker Schoolers!) and 455 Broadway is much more lively than it was before. It&rsquo;s been harder to find a place to sit, which is a good problem to have. :)</p>

<p>I haven&rsquo;t blogged since last week, so a lot has happened since then:</p>

<ul>
<li>Very proud to say that I made the <code>cats</code> stream on Zulip.</li>
<li>My implementation of gunzip is undergoing debugging, so hopefully I can have that done by the end of the week.</li>
<li>Dana taught me how to solder! I soldered wires onto a strip of NeoPixels.</li>
<li>Dana and I checked out <a href="https://hackmanhattan.com/">HackManhattan</a>, a space for hardware hackers. They were kind enough to let us go through their extra parts and we found the power sources we were looking for for the party on Friday.</li>
<li>Mel Chua, our first resident, gave us very informative talks on different learning styles and how to maximize our time at Hacker School. I do sort of wish this happend on the first week for &ldquo;seconds&rdquo; since I feel like some of us floundered at figuring out how to get used to self-directedness.</li>
<li>I missed my first Friday session to go visit my mom in North Carolina.</li>
<li>I am back to being addicted to coffee. <a href="http://www.portorico.com/store/">Porto Rico Importing Co.</a> is my vice.</li>
</ul>


<p>Here&rsquo;s to another six weeks! Well, more like 5 and a half weeks. :D:D:D:D:D:D: &lt;&mdash; Some alums taught me this happy/sad combo face.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OCaml! Haskell! Gunzip!]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/15/gunzip/"/>
    <updated>2014-07-15T18:57:22-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/15/gunzip</id>
    <content type="html"><![CDATA[<p>For a couple of days, I told myself that I would study OCaml now that I have a decent grasp of Haskell. But it&rsquo;s actually been pretty
difficult to leave Haskell because I am rather enamoured with the language. &#10084;</p>

<p>I did however, manage to read through a good chunk of <a href="http://ocaml-book.com/">OCaml from the Very Beginning</a>, and work through the exercises that accompany each chapter. I found it to be a very solid introductory text, as the author makes no assumptions about the reader&rsquo;s background. I plan to finish it up at some point, and move on to <em>Real World OCaml</em>.</p>

<p>A couple of things that jumped out at me as I started learning OCaml:</p>

<ul>
<li>The standard library is pretty sparse. Will be checking out Jane Street&rsquo;s Core.</li>
<li>There are mutable data structures.</li>
<li>OCaml supports imperative and functional styles.</li>
<li>The introductory text, at least <em>OCaml from the Very Beginning</em>, emphasized understanding tail recursion (which I didn&rsquo;t really think about when learning Haskell, but maybe I did it wrong)</li>
<li>Utop is pretty cool.</li>
<li>I got confused by <code>=</code> and <code>==</code> because I wanted to use <code>==</code> but that seems to be reserved for people who really know what they&rsquo;re doing.</li>
</ul>


<p>For the past few days, I have been exploring file compression and decompression. I needed a new project and starting looking at what previous HSers had done, and I found this <a href="http://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/">blog post</a> by alumna <a href="https://twitter.com/b0rk">Julia Evans</a> on implementing gunzip in Julia. So I&rsquo;ve decided to implement it in Haskell! :D :D :D</p>

<p>I&rsquo;ve been reading up on the <a href="http://www.gzip.org/algorithm.txt">algorithm specifications</a> for inflating and deflating and the <a href="http://www.gzip.org/format.txt">format</a> information. I tried looking at the source in C but my head started to hurt, so I have been studying Julia&rsquo;s <a href="https://github.com/jvns/gzip.jl/blob/master/gzip.jl">implementation</a>, which despite me never having seen Julia code before, has been very helpful.</p>

<p>I spent today working on parsing a gzipped file&rsquo;s header and metadata information. Tomorrow I will read up more on the algorithm description and dive into implementing inflate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion Friday]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/12/recursion-friday/"/>
    <updated>2014-07-12T12:38:25-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/12/recursion-friday</id>
    <content type="html"><![CDATA[<p>Yesterday at Hacker School was Recursion Friday. Basically, a group of HSers sat down and worked on various recursive problems and brain teasers in the languages of our choice.</p>

<p>Recursion used to make me go like this:</p>

<p><img src="http://media.giphy.com/media/NoglyWTK9tCMw/giphy.gif" alt="Scared" /></p>

<p>But somewhere along the way as I was learning Haskell, recursion started to click with my previously recursion-addled brain.</p>

<p>One of the questions yesterday was to find all of the permutations of a string. After some white boarding with Denise and Georgi, talking it through with Alan and Tom, we basically came to the conclusion that the algorithm should be something like this (in pseudocode):</p>

<p>```
Permute(&ldquo;abcd&rdquo;) =</p>

<pre><code>"a" + Permute("bcd") 
&lt;list concatenation&gt; 
"b" + Permute("acd") 
&lt;list concatenation&gt;
"c" + Permute("bcd") 
&lt;list concatenation&gt;
"d" + Permute("abc") 
</code></pre>

<p>```</p>

<p>So, generate all of the permutations of the string without one of the elements of the original string, and concat it with all possible permutations of the smaller string, then concat all of those together to get the final list of permutations.</p>

<p>After speaking with Alan about a Haskell implementation, this is what I ended up with</p>

<p>```haskell
import Data.List</p>

<p>permute :: Eq a => [a] &ndash;> [[a]]
permute [] = [[]]
permute xs = [ y | prefix &lt;&ndash; xs, y &lt;&ndash; map (prefix:)</p>

<pre><code>               $ permute $ xs \\ [prefix]]
</code></pre>

<p>```</p>

<p>An obnoxiously short list comprehension.</p>

<p>Pull the prefix from the original string, map a list concatenation of the prefix, (prefix:), to the various permutations of the rest of the string. <code>\\</code> is this nifty function in the Data.List library that performs list difference, so it was an easy way to exclude the prefix from the original string (thanks to Alan for showing me that).</p>

<p>```haskell
ghci> permute &ldquo;abcd&rdquo;</p>

<p>[&ldquo;abcd&rdquo;,&ldquo;abdc&rdquo;,&ldquo;acbd&rdquo;,&ldquo;acdb&rdquo;,&ldquo;adbc&rdquo;,&ldquo;adcb&rdquo;,
&ldquo;bacd&rdquo;,&ldquo;badc&rdquo;,&ldquo;bcad&rdquo;,&ldquo;bcda&rdquo;,&ldquo;bdac&rdquo;,&ldquo;bdca&rdquo;,
&ldquo;cabd&rdquo;,&ldquo;cadb&rdquo;,&ldquo;cbad&rdquo;,&ldquo;cbda&rdquo;,&ldquo;cdab&rdquo;,&ldquo;cdba&rdquo;,
&ldquo;dabc&rdquo;,&ldquo;dacb&rdquo;,&ldquo;dbac&rdquo;,&ldquo;dbca&rdquo;,&ldquo;dcab&rdquo;,&ldquo;dcba&rdquo;]
```</p>

<p>Recursion still blows my mind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bencoding and Networking]]></title>
    <link href="http://blog.dariajung.com/blog/2014/07/01/bencoding-and-networking/"/>
    <updated>2014-07-01T10:15:49-04:00</updated>
    <id>http://blog.dariajung.com/blog/2014/07/01/bencoding-and-networking</id>
    <content type="html"><![CDATA[<p>One of the things that I have always been fearful of is networking. Sockets, TCP/IP, and forking, all of that. In a class at university, I had done some networking in C; I remember reading <a href="http://beej.us/guide/bgnet/">Beej&rsquo;s guide to network programming</a>, and I found myself returning to it, and appreciating it a bit more this time. It&rsquo;s funny how when you&rsquo;re learning something in school, you could care less about it. You just want to get from point A to point B in the shortest way possible. But when you have the time to be in a self-directed environment like Hacker School, you find yourself wanting to revisit things that you didn&rsquo;t learn properly the first time around, wanting to tell your past self: &ldquo;You should have paid more attention when you were learning this!&rdquo;</p>

<p>So, to learn networking in Haskell, I have decided to incrementally work towards building a simple Bittorrent client. Yesterday, I read about <a href="http://en.wikipedia.org/wiki/Bencode">bencode</a>, the encoding used by the Bittorrent protocol for torrent files (metadata).</p>

<p>Bencode supports four types of values:</p>

<ul>
<li>Integers</li>
<li>(Byte) Strings</li>
<li>Lists</li>
<li>Dictionaries (Hash Maps)</li>
</ul>


<p>Integers are encoded as <code>i&lt;integer encoded in base 10 ASCII&gt;e</code>. Integers can be negative, but 0 cannot be -0.</p>

<p>ByteStrings are encoded as <code>&lt;length&gt;:&lt;contents&gt;</code>. So &ldquo;foo&rdquo; would be encoded as 3:foo. The length of the content can be 0, but cannot be negative.</p>

<p>Lists are encoded as <code>l&lt;contents&gt;e</code>. Contents are bencoded elements of the list (in order), and are concatenated. Something like &ldquo;cat31&rdquo; would be encoded as l3:cati31ee.</p>

<p>Dictionaries are encoded as <code>d&lt;contents&gt;e</code>. The keys must be bytestrings, and the dictionary is ordered lexiographically by key. The encoded key value pair follow each other immediately. {&ldquo;cat&rdquo;: &ldquo;meow&rdquo;, &ldquo;dog&rdquo;: 44} would be encoded as d3:cat4:meow3:dogi44ee.</p>

<p>After reading this, I used the <a href="http://www.haskell.org/haskellwiki/Parsec">Parsec</a> library and wrote a parser for bencoded values in Haskell. I tested it on a torrent for Ubuntu and got back this:</p>

<p><img src="/images/torrent.png" alt="&quot;Metadata&quot;" /></p>

<p>We can see things like:</p>

<ul>
<li>&ldquo;announce&rdquo;: &ldquo;<a href="http://torrent.ubuntu.com:6969/announce">http://torrent.ubuntu.com:6969/announce</a>&rdquo;</li>
<li>&ldquo;announce-list&rdquo;: &ldquo;<a href="http://torrent.ubuntu.com:6969/announce">http://torrent.ubuntu.com:6969/announce</a>&rdquo;, &ldquo;<a href="http://ipv6.torrent.ubuntu.com:6969/announce">http://ipv6.torrent.ubuntu.com:6969/announce</a>&rdquo;</li>
<li>&ldquo;comment&rdquo;: &ldquo;Ubuntu CD releases.ubuntu.com&rdquo;</li>
<li>&ldquo;creation date&rdquo;: 1391706680</li>
</ul>


<p>and so on.</p>

<p>The crazy wall of text is mostly due to all of the pieces for this particular torrent.</p>

<p>After this, to get a better sense of networking in Haskell, I read up on TCP/IP and started working towards this <a href="http://www.haskell.org/haskellwiki/Implement_a_chat_server">tutorial</a> on building a multi-threaded chat server in Haskell, and getting a feel for the Network.Socket library.</p>

<p>At the very basic level: Socket &ndash;> Bind &ndash;> Listen &ndash;> Accept.</p>

<p>My networking journey will continue today&hellip;</p>
]]></content>
  </entry>
  
</feed>
